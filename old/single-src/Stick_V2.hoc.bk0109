{load_file("stdlib.hoc")}
//{load_file("string.hoc")}
//***************************************
// 2015.05.20 setExpSyn added

// 2015.08.06
// This Stick file is changed to make realistic antennal lobe model

begintemplate Stick

public soma
public biophys, connect2target, setGABAlla,setGABAllb, setIclamp, setStim, setExp2Syn, setExpSyn
public setgaba, setIntermitStim, setIntermitStim1
public insertPN, insertLNlla,insertLNllb, insertFukuda, insertPas, insertHH
public insertMsLN, insertIAHP, insertICA,insertIAHP2, insertCAD, insertLNlla2, insertLNlla3
public insertLNlla4, insertLNllb2, insertHH_RN, insertType2LN, insertFukuda_tunned
public insertMsPN, insertMsPN_NoCad, insertMsPN_cad

public uninsertPas, uninsertHH, uninsertLNlla, uninsertFukuda, uninsertMsPN

public setVoltageRecord, printVoltageRecord, printVoltageRecord2
public synlist
public type, setType
public setSpikeRecord, printSpikeRecord, Delay
public setIClamp2, setIClamp_with_Latency, setRN_biophys

public gaba, setGABA, setNET_GABA, setGABAb
public mkNET_GABAa,mkNET_GABAb,mkNET_nACh, nACh
public imax
public setGID, getGID, gid
public vs_ncs
public nAChs

objref nAChs 
objref mechname[10]
objref typename[6]
objref this
objref gabaa_list, gabab_list
objref synlist
objref vs_ncs

public records, rec_names
objref records, rec_names

public dose
proc init(){
    for i=0,10-1{
	mechname[i] = new String()
    }
    for i = 0, 6-1{
	typename[i] = new String()
    }
    mechname[0].s = "default"
    mechname[1].s = "MsLN"
    mechname[2].s = "MsPN"
    mechname[3].s = "Fukuda"
    mechname[4].s = "HH"
    mechname[5].s = "Pas"
    
    typename[0].s = "default"
    typename[1].s = "PN"
    typename[2].s = "LN"
    typename[3].s = "RN"
    typename[4].s = "nothing"
    typename[5].s = "nothing"

    mechanism_flg = 0
    type = 0
    gid = 0
    //Interval = 0
    Delay = 0
    
    imax =0
    
    IS_SUPERCOMPUTER = 1
    
    gabaa_list = new List()
    gabab_list = new List()

    synlist = new List()
    
    vs_ncs = new List()
    nAChs  = new List()
    
    records = new List()
    rec_names = new List()

    biophys()
    
    dose = 0
}

create soma
proc biophys(){
    soma{
	/*	
	nseg = 10
	diam = 10
	L = 10
	*/	
	//Ra = 100.0
  }
}
proc setRN_biophys(){
    soma{
	nseg = 10
	diam = 20
	L = 100
	//Ra = 100.0
  }
}

public setPN_biophys
proc setPN_biophys(){
    soma{
	nseg = 10
	diam = 4000
	L = 100
	Ra = 100.0
  }
}


proc setGID(){
    gid = $1
}
func getGID(){
    return gid
}
proc setType(){
    type = $1
}
public getAREA
func getAREA(){
    return area(0.5)
}
public gsyn,esyn
objref gsyn

objref esyn
obfunc setExp2Syn(){local rev,pos
    rev = $1
    pos = 0.7
    if(numarg()==2){
	pos = $2
    }
    soma esyn = new Exp2Syn(pos) synlist.append(esyn)
    esyn.e = rev
    esyn.tau1 = 1
    esyn.tau2 = 2
    //esyn.tau1 = 1
    //esyn.tau2 = 0.5
    return esyn
}
obfunc setExpSyn(){local rev
    rev = $1
    soma esyn = new ExpSyn(0.7) synlist.append(esyn)
    esyn.e = rev
    esyn.tau = 0.1
    return esyn
}


proc insertLNlla(){
    mechanism_flg = 1
    soma{
	insert hh
	gnabar_hh = 0.190
	gkbar_hh = 0.060
	gl_hh = 0.0001
	el_hh = -67
	ena = 50
	ek = -100

	insert IAHP2
	eahp_IAHP2 = -140

	insert cad
	ctau_cad = 0.0000125

	insert ICA
	eca = 120
    }
}

proc uninsertPas(){
    forall{
	uninsert pas
    }
}

proc uninsertHH(){
    forall{
	uninsert hh
    }
}

proc uninsertLNlla(){
    forall{
	uninsert hh
	uninsert IAHP2
	uninsert cad
	uninsert ICA
    }
}

proc insertHH_RN(){
    soma{
	insert hh
	gkbar_hh = 0.001
	gnabar_hh = 0.0001 
    }
}

/*
proc insertIAHP(){
    mechanism_flg = 1
    soma{
	insert IAHP
	eahp_IAHP = -140
	ctau_IAHP = 0.0000125
    }
}
*/

proc insertType2LN(){
    soma{
	insert k_channel
	insert IAHP2
	insert ICA
	insert cad
    }
}

proc insertIAHP2(){
    mechanism_flg = 1
    soma{
	insert IAHP2
	eahp_IAHP2 = -140
    }
}

proc insertCAD(){
    mechanism_flg = 1
    soma{
	insert cad
	ctau_cad = 0.0000125
    }
}

proc insertICA(){
    mechanism_flg = 1
    soma{
	insert ICA
	eca = 120
    }
}

proc insertLNllb(){
    mechanism_flg = 1
    forall{
	insert MsLN
	ena_MsLN = 50
	ek_MsLN = -100
	el_MsLN = -67
	insert IAHP
	eahp_IAHP = -140
	ctau_IAHP = 0.000125
	insert ICA
	eca = 120
    }
}


proc insertLNllb2(){
    mechanism_flg = 1
    forall{

	insert MsLN
	ena = 50
	ek  = -100
	el_MsLN = -67
	insert IAHP2
	eahp_IAHP2 = -140
	insert cad
	//cainf_cad = 1.4
	ctau_cad = 0.000125
	insert ICA
	eca = 120

    }
}

proc insertFukuda(){
    if($1==0){printf("insertFukuda()\n")}
    mechanism_flg = 3
    forall{
	insert GPeA
	ena_GPeA = 55
	ek_GPeA = -70
	eca_GPeA = 124
	el_GPeA = -50
    }
}

proc insertMsPN(){
    if($1==0){printf("insertMsPN()\n")}
    mechanism_flg = 3
    forall{
	insert MsPN
	ena_MsPN = 55
	ek_MsPN = -70
	eca_MsPN = 124
	el_MsPN = -50
	insert cadyn
    }
}

proc uninsertMsPN(){
    if($1==0){printf("uninsertMsPN()\n")}
    mechanism_flg = 3
    forall{
	uninsert MsPN
	uninsert cadyn
    }
}

proc insertMsPN_cad(){
    if($1==0){printf("insertMsPN_cad()\n")}
    mechanism_flg = 3
    forall{
	insert MsPN_cad
	ena_MsPN_cad = 55
	ek_MsPN_cad = -70
	eca_MsPN_cad = 124
	el_MsPN_cad = -50
    }
}

proc insertMsPN_NoCad(){
    if($1==0){printf("insertMsPN_NoCad()\n")}
    mechanism_flg = 3
    forall{
	insert MsPN
	ena_MsPN = 55
	ek_MsPN = -70
	eca_MsPN = 124
	el_MsPN = -50
	//insert ca_dyn
    }
}

proc uninsertFukuda(){
    forall{
	uninsert GPeA
    }
}

proc insertFukuda_tunned(){
    if($1==0){printf("insertFukuda_tunned()\n")}
    mechanism_flg = 3
    forall{
	insert GPeA
	ena_GPeA = 55
	ek_GPeA = -70
	eca_GPeA = 124
	el_GPeA = -50
	//a_m_GPeA = 0.065
	a_m_GPeA = 0.048
	//a_W_GPeA = 0.055
	a_W_GPeA = 0.060
    }
}

proc insertHH(){
    if($1==0){printf("insertHH()\n")}
    mechanism_flg = 4
    forall{
	insert hh
    }
}

proc insertPas(){
    mechanism_flg = 5
    forall{
	insert pas
    }
}

proc insertHH_RN(){
    forall{
	insert hh
	gkbar_hh = 0.001
	gnabar_hh = 0.0001 
    }
}

public connect2target
obfunc connect2target(){local numSynapses localobj nc,target
    target = $o1
    //numSynapses = $2
    soma nc = new NetCon(&v(0.5),$o1)
    nc.delay = 2
    nc.threshold = 0
    nc.weight = 10
    //print "nc.weight ",nc.weight
    return nc
}

public connectVecStim
obfunc connectVecStim(){local latency, id, i, seed, N, c localobj synapse, vecstim, nc
    vecstim = $o1
    synapse = $o2
    
    nc = new NetCon(vecstim, synapse)
    nc.threshold = 0
    nc.weight    = 1
    if(numarg()==6){
	dose = $3
	id   = $4
	i    = $5
	N    = $6
	c    = log10(dose)
	seed = id*N + i
	latency = setLatency(seed,c)
    }else{
	latency = 0
    }
    nc.delay = Delay + latency
    vs_ncs.append(nc)
    return nc
}

public setNCRecord
objref ncs_tvecs
proc setNCRecord(){local i localobj ncs_tvec
    ncs_tvecs= new List()
    for i=0, vs_ncs.count()-1{
	ncs_tvec = new Vector()
	vs_ncs.o(i).record(ncs_tvec)
	ncs_tvecs.append(ncs_tvec)
    }
}

public printNCRecord
proc printNCRecord(){local id,i,size_row, size_col localobj fobj,mt
    strdef _FPRINT_DIR_, _FPRINT_NAME_
    id = $1
    _FPRINT_DIR_= $s2    

    mt   = new Matrix()
    fobj = new File()

    size_row=1
    for i=0, ncs_tvecs.count()-1{
	if(size_row<ncs_tvecs.o(i).size()){size_row=ncs_tvecs.o(i).size()}
    }
    if(ncs_tvecs.count()==0){
	size_col = 1
    }else{
	size_col = ncs_tvecs.count()
    }
    mt.resize(size_row,size_col)
    for i=0, ncs_tvecs.count()-1{
	mt.setcol(i,ncs_tvecs.o(i))
    }
    sprint(_FPRINT_NAME_,"%sNetCon_%d.txt",_FPRINT_DIR_,id) 
    fobj.wopen(_FPRINT_NAME_)
    mt.fprint(fobj,"%4.3f\t")
    fobj.close()
}

objref ic
public ic
obfunc setIclamp(){
    soma ic = new IClamp(0.4)
    if(numarg() ==3){
	//printf("setIclamp numarg()==3\n")
	ic.del = $1
	ic.dur = $2
	ic.amp = $3
    }else{
	//printf("setIclamp numarg()!=3\n")
	ic.del = 1
	ic.dur = 10
	ic.amp = 5
    }
    return ic
}

objref stim_vec, tvec, stim_flg, spiketiming
public stim_vec, tvec, stim_flg, spiketiming
proc setIClamp2(){local stoptime, timestep, i, j, num_spike, flg, stim_on,start_time, length, amp, L_RATIO,A_RATIO  localobj rand, datafile
    stoptime = $1
    timestep = $2
    strdef filename
    filename = $s3

    span = stoptime/timestep
    
    //print "stoptime ",stoptime, " timestep ",timestep, " span ",span

    soma ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5
    tvec = new Vector(span)
    for i=0,span -1 {
	tvec.x[i] = timestep * i
    }
    stim_flg = new Vector(span,0)
    spiketiming = new Vector()
    datafile = new File()
    stim_vec = new Vector(span,0)
    //sprint(filename,"spiketiming0.dat")
    datafile.ropen(filename)
  
    while(!datafile.eof()){
	var = datafile.scanvar()
	//print "datafile " ,var
	spiketiming.append(var-6.0)
    }
    spiketiming.remove(spiketiming.size()-1)
    num_spike = spiketiming.size()
        
    //print filename
    //spiketiming.printf("%5.8f\n")
    datafile.close()
    j=0
    for i=0, span -1{
	if(j<(num_spike-1)){
	    //print tvec.x[i]
	    if(((spiketiming.x[j]*1000) <= tvec.x[i])&&((spiketiming.x[j+1]*1000) > tvec.x[i])){
		stim_flg.set(i,1)
		j +=1
	    }
	}
    }
    flg = 0
    stim_on = 0
    for i=0, span-1{
	if(stim_flg.x[i]==1){
	    stim_on = 1
	}
	if(stim_on == 1){
	    if(flg == 0){
		start_time =tvec.x[i]
		flg = 1
	    }
	    if(tvec.get(i) == start_time){
		stim_vec.set(i,0)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=0){
		stim_vec.set(i,-amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=length){
		stim_vec.set(i,amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=L_RATIO*length){
		stim_vec.set(i,-amp*A_RATIO)
		//print stim_vec.get(i)
	    }else{
		stim_vec.set(i,0)
		stim_on = 0
		flg = 0
	    }
	}
    }
    stim_vec.play(&ic.amp, tvec, 1)
    //print "stim_vec"
    //stim_vec.printf()
}

func Latency(){local latency_, L0_, Lm_, lambda_, c
    c      = $1
    L0_     = $2
    lambda_ = $3
    Lm_     = $4

    latency_ = L0_ - lambda_ * c
    
    /*
    if(latency_<0){
	return 0
    }
    */
    if(latency_>Lm_){
	return latency_
    }else if(Lm_<0){
	return 0
    }else{
	return Lm_
    }
}

func setLatency(){\
    local seed, C, L0, lambda, Lm, latency\
    localobj rand
    //##################################################
    // FOR LATENCY
    seed   = $1
    rand   = new Random(seed)
    
    L0     = rand.normal(158,62)
    lambda = rand.lognormal(2.9,0.85)
    lambda = exp(lambda)
    Lm     = rand.normal(67,30)
    C      = $2 //Concentration

    latency = Latency(C,L0,lambda,Lm)
    latency = latency/1000.0
    printf("Latency : %f, C : %f, Seed : %d\n",latency,C,seed) 
    return latency
}

func setIClamp_with_Latency(){local stoptime, timestep, i, j, num_spike, flg, stim_on,start_time, length, amp, L_RATIO,A_RATIO, seed, L0, Lm, lambda, C, latency  localobj rand, datafile, rnd

    // ***Usage***
    // setIclamp_with_Latency(stoptime, timestep, filename, seed, concentration)
    //

    stoptime = $1
    timestep = $2
    strdef filename
    filename = $s3
    
    
    span = stoptime/timestep
    
    //print "stoptime ",stoptime, " timestep ",timestep, " span ",span
    
    //##################################################
    // FOR LATENCY
    seed   = $4
    rand   = new Random(seed)
    
    L0     = rand.normal(158,62)
    lambda = rand.lognormal(2.9,0.85)
    lambda = exp(lambda)
    Lm     = rand.normal(67,30)
    C      = $5

    latency = Latency(C,L0,lambda,Lm)
    latency = latency/1000.0
    //printf("Latency : %f, C : %f\n",latency,C) 
    //##################################################
    
    soma ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5
    tvec = new Vector(span)
    for i=0,span -1 {
	tvec.x[i] = timestep * i
    }
    stim_flg = new Vector(span,0)
    spiketiming = new Vector()
    datafile = new File()
    stim_vec = new Vector(span,0)
    //sprint(filename,"spiketiming0.dat")
    datafile.ropen(filename)
  
    while(!datafile.eof()){
	var = datafile.scanvar()
	//print "datafile " ,var
	spiketiming.append(var-6.0+latency)// FOR LATENCY
    }
    spiketiming.remove(spiketiming.size()-1)
    num_spike = spiketiming.size()
        
    //print filename
    //spiketim
    //spiketiming.printf("%5.8f\n")
    datafile.close()
    j=0
    for i=0, span -1{
	if(j<(num_spike-1)){
	    //print tvec.x[i]
	    if(((spiketiming.x[j]*1000) <= tvec.x[i])&&((spiketiming.x[j+1]*1000) > tvec.x[i])){
		stim_flg.set(i,1)
		j +=1
	    }
	}
    }
    flg = 0
    stim_on = 0
    for i=0, span-1{
	if(stim_flg.x[i]==1){
	    stim_on = 1
	}
	if(stim_on == 1){
	    if(flg == 0){
		start_time =tvec.x[i]
		flg = 1
	    }
	    if(tvec.get(i) == start_time){
		stim_vec.set(i,0)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=0){
		stim_vec.set(i,-amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=length){
		stim_vec.set(i,amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=L_RATIO*length){
		stim_vec.set(i,-amp*A_RATIO)
		//print stim_vec.get(i)
	    }else{
		stim_vec.set(i,0)
		stim_on = 0
		flg = 0
	    }
	}
    }
    stim_vec.play(&ic.amp, tvec, 1)
    //print "stim_vec"
    //stim_vec.printf()
    return latency
}

objref st
proc setStim(){local delay, imax
    delay = $1
    imax = $2
    soma st = new Stim(0.1)
    st.del = delay
    st.Imax = imax
}

objref nACh
obfunc mkNET_nACh(){local gmax,Erev,Cmax,Cdur,Alpha,Beta
    //gmax  = 0.3
    gmax  = $1
    Erev  = 0.0
    Cmax  = 0.5
    Cdur  = 0.3 
    Alpha = 10
    Beta  = 0.2
    soma nACh = new NET_GABAa(0.3)
    nACh.gmax = gmax
    nACh.Erev = Erev
    nACh.Cmax = Cmax
    nACh.Cdur = Cdur
    nACh.Alpha = Alpha
    nACh.Beta = Beta
    nAChs.append(nACh)
    return nACh
}

objref gaba
// This GABA_A synapse uses NetCon to connect
obfunc mkNET_GABAa(){local gmax
    gmax = $1
    soma gaba = new NET_GABAa(0.3)
    gaba.gmax = gmax
    gabaa_list.append(gaba)
    return gaba
}

obfunc mkNET_GABAb(){local gmax
    gmax = $1
    soma gaba = new NET_GABAb(0.5)
    gaba.gmax = gmax
    gabab_list.append(gaba)
    return gaba
}

public st1
objref st1
obfunc setIntermitStim(){local delay, imax, interval
    delay = $1
    imax = $2
    interval = $3
    soma st1 = new intermitStim(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    //st1.Imax2 = imax
    st1.nStim = -1
    return st1
}

obfunc setIntermitStim1(){local delay, imax, interval, imax2, nstim
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    soma st1 = new intermitStim(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    //st1.seed = 0
    return st1
}
/*
public setIntermitStim_withNoise
obfunc setIntermitStim_withNoise(){local delay, imax, interval, imax2, nstim
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    soma st1 = new intermitStimNoise(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    return st1
}
*/

public setIntermitStim_gaus
obfunc setIntermitStim_gaus(){local delay, imax, interval, imax2, nstim,sigma_o
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    sigma_o = $6
    soma st1 = new intermitStimGaus(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    st1.sigma_o = sigma_o
    return st1
}

objref vec
public vec
proc setVoltageRecord(){
    //tvec1 = new Vector()
    vec = new Vector()
    
    //tvec1.record(&t)
    vec.record(&soma.v(0.5))
}

objref veci
public setCurrentRecord
proc setCurrentRecord(){
    //tvec2 = new Vector()
    veci = new Vector()
    //tvec2.record(&t)
    veci.record(&st.i)
}

objref gabaa_r_list, gabab_r_list
public setGABACurrentRecord
proc setGABACurrentRecord(){local i localobj vecg
    gabaa_r_list = new List()
    gabab_r_list = new List()
    //printf("setCurrentRecord_GABA()\n")
    for i=0, gabaa_list.count()-1{
	vecg = new Vector()
	vecg.record(&gabaa_list.o(i).i)
	gabaa_r_list.append(vecg)
    }
    for i=0, gabab_list.count()-1{
	vecg = new Vector()
	vecg.record(&gabab_list.o(i).i)
	gabab_r_list.append(vecg)
    }
}

objref veci2
public setCurrentRecord1
proc setCurrentRecord1(){
    //tvec4 = new Vector()
    veci2 = new Vector()
    
    //tvec4.record(&t)
    veci2.record(&st1.i)
}

objref nACh_records
public setCurrentRecord_nACh
proc setCurrentRecord_nACh(){local i localobj nACh_record
    //rtvec = new Vector()
    //rtvec.record(&t)
    printf("setCurrentRecord_nACh()\n")

    nACh_records = new List()
    printf("nACh.count() : %d\n",nAChs.count())
    for i=0, nAChs.count()-1{
	nACh_record = new Vector()
	nACh_record.record(&nAChs.o(i).i)
	nACh_records.append(nACh_record)
    }
}

objref exp2syn_records
public setCurrentRecord_exp2syn
proc setCurrentRecord_exp2syn(){local i localobj exp2syn_record
    //rtvec = new Vector()
    //rtvec.record(&t)
    exp2syn_records = new List()
    for i=0, synlist.count()-1{
	exp2syn_record = new Vector()
	exp2syn_record.record(&synlist.o(i).i)
	exp2syn_records.append(exp2syn_record)
    }
}


objref mt_g1, file_g1, mt_g2, file_g2
public printGABACurrentRecord
proc printGABACurrentRecord(){local i,j localobj tvec3
    strdef filepath
    i        =$1
    filepath =$s2
    tvec3    =$o3

    mt_g1 = new Matrix()
    file_g1 = new File()

    mt_g2 = new Matrix()
    file_g2= new File()
    //printf("printCurrentRecord_GABA():%d\n",i)
    //tvec.printf()
    mt_g1.resize(tvec3.size(),gabaa_r_list.count()+1)
    mt_g1.setcol(0,tvec3)
    for j=0, gabaa_r_list.count()-1{	
	printf("gabaa_r_list %d\n",j)
	mt_g1.setcol(1+j,gabaa_r_list.o(j))
    }

    mt_g2.resize(tvec3.size(),gabab_r_list.count()+1)
    mt_g2.setcol(0,tvec3)
    for j=0, gabab_r_list.count()-1{
	printf("gabab_r_list %d\n",j)	
	mt_g2.setcol(1+j,gabab_r_list.o(j))
    }
    //mt.printf("%5.5f\t")
    strdef filename
    //print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sGabaaCurrent_%s%d.txt",filepath,typename[type].s ,i) 
    //print filename
    file_g1.wopen(filename)
    mt_g1.fprint(file_g1,"%5.5f\t")
    file_g1.close()

    sprint(filename,"%sGababCurrent_%s%d.txt",filepath, typename[type].s ,i) 
    //print filename
    file_g2.wopen(filename)
    mt_g2.fprint(file_g2,"%5.5f\t")
    file_g2.close()
}

/*
objref mt2,file2
public mt2, printCurrentRecord
proc printCurrentRecord(){local i
    i = $1
    mt2 = new Matrix()
    file2 = new File()
    
    //tvec.printf()
    mt2.resize(tvec2.size(),gaba_r_list.count)
    mt2.setcol(0,tvec2)
    mt2.setcol(1,veci)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"./record/stimcurrent_%s%d.txt",mechname[mechanism_flg].s ,i) 
    file2.wopen(filename)
    mt2.fprint(file2,"%5.5f\t")
    file2.close()
}
*/
objref mt3,file3
public mt3, printCurrentRecord1
proc printCurrentRecord1(){local i localobj tvec4
    i = $1
    tvec4 = $o2
    mt3 = new Matrix()
    file3 = new File()
    
    //tvec.printf()
    mt3.resize(tvec4.size(),2)
    mt3.setcol(0,tvec4)
    mt3.setcol(1,veci2)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"./record/stimcurrent_%s%d.txt",mechname[mechanism_flg].s ,i) 
    file3.wopen(filename)
    mt3.fprint(file3,"%5.5f\t")
    file3.close()
}

public printCurrentRecord_nACh
proc printCurrentRecord_nACh(){local id,j localobj tvec,mt, fobj
    id = $1
    strdef _FPRINT_DIR_,_FPRINT_NAME_
    _FPRINT_DIR_= $s2
    tvec = $o3
    mt = new Matrix()
    fobj = new File()
    
    //tvec.printf()
    mt.resize(tvec.size(),nACh_records.count()+1)
    mt.setcol(0,tvec)
    for j=0, nACh_records.count()-1{	
	//printf("nACh_records %d\n",j)
	mt.setcol(1+j,nACh_records.o(j))
    }
    
    //mt.printf("%5.5f\t")
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(_FPRINT_NAME_,"%sSynapticCurrent_nACh%d.txt",_FPRINT_DIR_,id) 
    fobj.wopen(_FPRINT_NAME_)
    mt.fprint(fobj,"%5.5f\t")
    fobj.close()
}

public printCurrentRecord_exp2syn
proc printCurrentRecord_exp2syn(){local id, j localobj tvec, mt, fobj
    id = $1
    strdef _FPRINT_DIR_, _FPRINT_NAME_
    _FPRINT_DIR_= $s2
    tvec = $o3
    mt = new Matrix()
    fobj = new File()
    
    mt.resize(tvec.size(),exp2syn_records.count()+1)
    mt.setcol(0,tvec)
    for j=0, exp2syn_records.count()-1{	
	printf("nACh_records %d\n",j)
	mt.setcol(1+j,exp2syn_records.o(j))
    }
   
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(_FPRINT_NAME_,"%sSynapticCurrent_exp2syn%d.txt",_FPRINT_DIR_,id) 
    fobj.wopen(_FPRINT_NAME_)
    mt.fprint(fobj,"%5.5f\t")
    fobj.close()
}

objref mt,file
public mt
public printVoltageRecord
proc printVoltageRecord(){local i localobj tvec1
    strdef filepath
    i = $2
    pcid = $1
    filepath = $s3
    tvec1 = $o4
    mt = new Matrix()
    file = new File()
    
    //tvec.printf()
    mt.resize(tvec1.size(),2)
    mt.setcol(0,tvec1)
    mt.setcol(1,vec)
    
    //mt.printf("%5.5f\t")
    strdef filename
    //print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sVoltage_%s%d.txt",filepath,typename[type].s,i) 
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}


objref ncSR// netcon for Spike Record
//objrf tvecSR, idvecSR //tvecSR time vector for Spike Record
public tvecSR
objref tvecSR
proc setSpikeRecord(){localobj nil
    tvecSR = new Vector()
    //idvecSR = new Vector()
    ncSR = connect2target(nil)
    //ncSR.record(tvecSR,idvecSR.srcgid)
    ncSR.record(tvecSR)
}

objref fileSR
public printSpikeRecord
proc printSpikeRecord(){local i, interval,tstop, istim1, istim2
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s%d.dat",filepath,typename[type].s,n)
    
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

public printSpikeRecord2
proc printSpikeRecord2(){local gid, interval,tstop, istim1, istim2
    if(numarg() == 6){
	gid = $1
	interval = $2
	tstop = $3
	istim1 = $4
	istim2 = $5
	filepath = $s6
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s%d.dat",filepath,typename[type].s,gid)
    
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %f\n",istim1)
    fileSR.printf("$ LN stimulation current max : %f\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

public printSpikeRecord_DoseResponse
proc printSpikeRecord_DoseResponse(){local i, interval,tstop, istim1, istim2
    strdef filename,filepath
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
 
    sprint(filename,"%sSpikerecord_%s_Dose%d_%d.dat",filepath,typename[type].s,dose,n)
   
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

public CalcPeakISF
func CalcPeakISF(){local i, tmp localobj spt
    spt = $o1
    PeakISF = -1
    //spt.printf("%f\t")
    //printf("\n")
    for i=0, spt.size()-1{
	if(i>0){
	    interval = spt.x[i]-spt.x[i-1]
	    ISF = 1000.0/interval
	    //print ISF
	    if(ISF>PeakISF){
		PeakISF = ISF
		//printf("PeakISF : %f\n",PeakISF)
	    }
	}
    }
    return PeakISF
}

public getNSpikes
func getNSpikes(){localobj spt
    // Get Number of Spikes
    spt = $o1
    return spt.size()
}

public getResDur
func getResDur(){localobj spt
    // Get Response Duration
    spt = $o1
    if(spt.size()==0){
	return 0
    }else{
	return spt.x[spt.size()-1]
    }
}

public printSpikeRecord_NetStim
proc printSpikeRecord_NetStim(){local i, interval,tstop, istim1, istim2
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s_FREQ%d_%d.dat",filepath,typename[type].s,dose,n)
   
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

endtemplate Stick