{load_file("nrngui.hoc")}
{load_file("Stick_V2.hoc")}
{load_file("ranstream.hoc")}

//************************************************
if(name_declared("STOPTIME")!=5){ execute("STOPTIME=50")}
if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
if(name_declared("INTERVAL")!=5){ execute("INTERVAL=1200")}
if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
if(name_declared("GABAB_ON")!=5){ execute("GABAB_ON=0")}
if(name_declared("GABAA_ON")!=5){ execute("GABAA_ON=0")}
if(name_declared("NSYNAPSE")!=5){ execute("NSYNAPSE=10")}
if(name_declared("NPN")!=5){ execute("NPN=50")}
if(name_declared("NLN")!=5){ execute("NLN=350")}
if(name_declared("NRN")!=5){ execute("NRN=20000")}
if(name_declared("WEIGHT_RNtoPN")!=5){ execute("WEIGHT_RNtoPN=0.1")}
if(name_declared("WEIGHT_RNtoLN")!=5){ execute("WEIGHT_RNtoLN=0.05")}
if(name_declared("GABAA_LTOL")!=5){ execute("GABAA_LTOL=1.0")}
if(name_declared("GABAB_LTOL")!=5){ execute("GABAB_LTOL=1.0")}
if(name_declared("GABAA_LTOP")!=5){ execute("GABAA_LTOP=1.0")}
if(name_declared("GABAB_LTOP")!=5){ execute("GABAB_LTOP=1.0")}
if(name_declared("DOSE")!=5){ execute("DOSE=1000")}
if(name_declared("NSTIM")!=5){ execute("NSTIM=1")}
if(name_declared("PROB_LTOP")!=5){ execute("PROB_LTOP=1.0")}
if(name_declared("PROB_LTOL")!=5){ execute("PROB_LTOL=1.0")}
if(name_declared("PROB_PTOL")!=5){ execute("PROB_PTOL=1.0")}
if(name_declared("WEIGHT_PTOL")!=5){ execute("WEIGHT_PTOL=0.05")}
if(name_declared("PTOL_ON")!=5){ execute("PTOL_ON=0")}
if(name_declared("RND_SEED")!=5){ execute("RND_SEED=0")}
if(name_declared("PN_NACH_GMAX")!=5){ execute("PN_NACH_GMAX=0")}
objref pc
pc = new ParallelContext()

NCELL = NPN + NLN + NRN
// NCELL : number of whole cells

strdef spt_file_dir
/*
if(DOSE==1000){
    if(NSTIM==1){
	spt_file_dir ="../input/spiketiming/1000dose_1stims_filtering/"
    }else if(NSTIM>1){
	spt_file_dir ="../input/spiketiming/1000dose_30stims_filtering/"
    }

}else if(DOSE==2000){
    if(NSTIM==1){
	//spt_file_dir ="../input/spiketiming/2000dose_1stims_filtering/"
    }else if(NSTIM>1){
	spt_file_dir ="../input/spiketiming/2000dose_30stims_filtering/"
    }

}else if(DOSE==100){
    if(NSTIM==1){
	spt_file_dir ="../input/spiketiming/100dose_1stims_filtering/"
    }else if(NSTIM>1){
	spt_file_dir ="../input/spiketiming/100dose_30stims_filtering/"
    }
}else if(DOSE==10){
    if(NSTIM==1){
	//spt_file_dir ="../input/spiketiming/10dose_1stims_filtering/"
    }else if(NSTIM>1){
	spt_file_dir ="../input/spiketiming/10dose_30stims_filtering/"
    }
}else if(DOSE==10000){
    if(NSTIM==1){
	spt_file_dir ="../input/spiketiming/10000dose_1stims_filtering/"
    }else if(NSTIM>1){
	spt_file_dir ="../input/spiketiming/10000dose_30stims_filtering/"
    }
}
*/
//spt_file_dir ="../input/spiketiming/1000dose_30stims_2000dose_30stims_filtering/"
//spt_file_dir ="../input/spiketiming/1000dose_30stims_100dose_30stims_filtering/"
if(RND_SEED==0){
    RND_SEED=0
}else if(RND_SEED!=0){
    RND_SEED=START_TIME
}
if(pc.id==0){
    printf("===================================================================\n")
    printf("dose-response.hoc\n")
    printf("START_TIME: %d, STOPTIME: %d, IS_SUPERCOMPUTER: %d\n",START_TIME,STOPTIME,IS_SUPERCOMPUTER) 
    printf("NPN: %d, NLN: %d, NRN: %d, NCELL:%d\n",NPN,NLN,NRN,NCELL)
    printf("GABAA_ON: %d, GABAB_ON: %d, NSYNAPSE: %d\n",GABAA_ON, GABAB_ON, NSYNAPSE)
    printf("WEIGHT_RNtoPN: %f, WEIGHT_RNtoLN: %f\n",WEIGHT_RNtoPN, WEIGHT_RNtoLN)
    printf("GABAA_LTOP: %f, GABAA_LTOL: %f, GABAB_LTOP: %f, GABAB_LTOL: %f\n",GABAA_LTOP, GABAA_LTOL,GABAB_LTOP, GABAB_LTOL)
    printf("DOSE: %d, NSTIM: %d\n",DOSE,NSTIM)
    printf("SPIKE TIMING: %s\n",spt_file_dir)
    printf("PROBALITY LTOP: %f,PROBALITY LTOL: %f, RND_SEED: %d\n",PROB_LTOP,PROB_LTOL,RND_SEED)
    printf("PTOL_ON: %d, PROBALITY PTOL: %f, WEIGHT PTOL : %f\n",PTOL_ON,PROB_PTOL,WEIGHT_PTOL)
    printf("PN_NACH_GMAX: %f\n",PN_NACH_GMAX)
    printf("===================================================================\n")
}
objref cells, nclist
objref ranlist
proc mkNetwork(){
    if(pc.id==0)printf("mkNetwork()\n")
    mkCells($1)
    mkConnections()
    print_CellList()
}

objref DOSE_V
DOSE_V = new Vector()
DOSE_V.append(10,20,50,100,200,500,1000,2000,5000,10000)

objref PNs, LNs, RNs
proc mkCells(){local i,ncell localobj cell, nc, nil
    if(pc.id==0)printf("mkCells()\n")
    ncell = $1
    //cells = new List()
    PNs   = new List()
    LNs   = new List()
    RNs   = new List()
    for(i=pc.id; i<ncell; i+=pc.nhost){
	cell = new Stick()
	//cells.append(cell)
	if(i < NPN){
	    //printf("MAKE PN:%d[%d]\n",i,pc.id)
	    cell.insertFukuda()
	    //cell.insertFukuda_tunned()
	    cell.setGID(i)
	    cell.setType(1)
	    cell.dose=DOSE_V.x[i]
	    //cell.setPN_biophys()
	    PNs.append(cell)
	    //psection()
	}else if((i>=NPN) && (i<NPN+NLN)){
	    //printf("MAKE LN:%d[%d]\n",i,pc.id)
	    cell.insertLNlla()
	    cell.setGID(i)
	    cell.setType(2)
	    cell.dose=DOSE_V.x[i%NPN]
	    //cell.setPN_biophys()
	    LNs.append(cell)
	}else if((i>=NPN+NLN) && (i<NCELL)){
	    //printf("MAKE RN:%d[%d]\n",i,pc.id)
	    cell.insertHH_RN()
	    cell.setGID(i)
	    cell.setType(3)
	    cell.setRN_biophys()
	    RNs.append(cell)
	}else{
	    printf("[ERROR] mkcells()[%d]",pc.id)
	    quit()
	}
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
    pc.multisplit()
}

proc mkConnections(){
    if(pc.id==0)printf("mkConnections()\n")
    // connect RN to LN and PN
    //ConnectWithRN()
    //ConnectWithNetStim()
    ConnectWithRN_nACh()
    // connect LN and PN
    //ConnectNtoN_NET_GABA()
}

proc print_CellList(){
    if(pc.id==0){
	printf("[CELL_LIST]\n")
	printf("PC.ID\tPN\tLN\tRN\n")
    }
    pc.barrier()
    printf("%d\t%d\t%d\t%d\n",pc.id, PNs.count, LNs.count, RNs.count)
}

objref rn_nclist
objref synlist
synlist = new List()
proc ConnectWithRN(){local i, j, base_gid, this_gid, pngid localobj syn, nc, nil, rnd
    if(pc.id==0)printf("ConnectWithRN()\n")
    rn_nclist = new List()
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,NRN)
    base_gid = 100000

    //--------------------------------------
    // MAKE PRESYNAPSE

    for i=0, RNs.count()-1{
	nc = RNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid+RNs.o(i).getGID()-NLN-NPN
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	rn_nclist.append(nc)
    }

    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	pngid = PNs.o(i).getGID()
	syn = PNs.o(i).setExp2Syn(0,j/NSYNAPSE)
	synlist.append(syn)
	for j=0, NSYNAPSE-1{
	    //syn = PNs.o(i).setExp2Syn(0,j/NSYNAPSE)
	    //synlist.append(syn)
	    src_gid = base_gid+pngid*NSYNAPSE+j
	    //print pngid, j, src_gid
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = WEIGHT_RNtoPN
	    rn_nclist.append(nc)
	}
    }
    for i=0, LNs.count-1{
	lngid = LNs.o(i).getGID()
	syn = LNs.o(i).setExp2Syn(0,j/NSYNAPSE)
	synlist.append(syn)
	for j=0, NSYNAPSE-1{
	    //syn = LNs.o(i).setExp2Syn(0,j/NSYNAPSE)
	    //synlist.append(syn)
	    //src_gid = base_gid+int(rnd.repick())
	    src_gid = base_gid+lngid*NSYNAPSE+j
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = WEIGHT_RNtoLN
	    rn_nclist.append(nc)
	}
    }
}

proc ConnectWithRN_nACh(){local i, j, base_gid, this_gid, pngid localobj syn, nc, nil, rnd
    if(pc.id==0)printf("ConnectWithRN_nACh()\n")
    rn_nclist = new List()
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,NRN)
    base_gid = 100000
    //--------------------------------------
    // MAKE PRESYNAPSE

    for i=0, RNs.count()-1{
	nc = RNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid+RNs.o(i).getGID()-NLN-NPN
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	rn_nclist.append(nc)
    }

    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	pngid = PNs.o(i).getGID()

	for j=0, NSYNAPSE-1{
	    syn = PNs.o(i).mkNET_nACh(PN_NACH_GMAX)
	    synlist.append(syn)
	    src_gid = base_gid+pngid*NSYNAPSE+j
	    //print pngid, j, src_gid
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = 1.0
	    rn_nclist.append(nc)
	}
    }
    for i=0, LNs.count-1{
	for j=0, NSYNAPSE-1{
	    syn = LNs.o(i).mkNET_nACh(0.3)
	    synlist.append(syn)
	    //src_gid = base_gid+int(rnd.repick())
	    src_gid = base_gid+i*NSYNAPSE+j
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = 1.0
	    rn_nclist.append(nc)
	}
    }
}

objref ns_list
proc ConnectWithNetStim(){local i, j, base_gid, this_gid, pngid, StimFrequency localobj syn, nc, nil, rnd, stim
    if(pc.id==0)printf("ConnectWithNetStim()\n")
    rn_nclist = new List()
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,NRN)
    base_gid = 100000
    
    ns_list = new List()

    //--------------------------------------
    // MAKE PRESYNAPTIC NETSTIM
    for i=0, PNs.count -1{
	StimFrequency = 5*(PNs.o(i).getGID()+1)
	PNs.o(i).dose = int(StimFrequency)
	print PNs.o(i).getGID(), StimFrequency
	for j=0, NSYNAPSE-1{
	    stim = new NetStim()
	    stim.number = 200
	    stim.start  = 50
	    stim.interval = 1000.0/StimFrequency
	    //print stim.interval
	    stim.noise = 0.02
	    ns_list.append(stim)
	}
    }
    print "ns_list.count()  ",ns_list.count()

    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	pngid = PNs.o(i).getGID()
	for j=0, NSYNAPSE-1{
	    syn = PNs.o(i).mkNET_nACh()
	    synlist.append(syn)
	    print "PNs.count, ddd ", PNs.count, i*NSYNAPSE+j, pc.id
	    nc = new NetCon(ns_list.o(i*NSYNAPSE+j), syn)
	    nc.delay  = 1.0
	    nc.weight = 1.0
	    rn_nclist.append(nc)
	}
    }
    print "rn_nclist.count()  ",rn_nclist.count()

    /*
    for i=0, LNs.count-1{
	for j=0, NSYNAPSE-1{
	    syn = LNs.o(i).mkNET_nACh()
	    synlist.append(syn)
	    //src_gid = base_gid+int(rnd.repick())
	    src_gid = base_gid+i*NSYNAPSE+j
	    nc = pc.gid_connect(src_gid,syn)
	    nc.delay  = 1.0
	    nc.weight = 1.0
	    rn_nclist.append(nc)
	}
    }
    */
}

obfunc mkRndvec(){local rnd_,vec_size,id_, vec_range, flg localobj r_, vec_
    vec_range = $1
    vec_size  = $2
    id_       = $3
    r_   = new Random(id_)
    vec_ = new Vector()
    r_.uniform(0,vec_range)
    while(vec_.size<vec_size){
	rnd_ = int(r_.repick())
	flg = 0
	for i=0, vec_.size()-1{
	    if(vec_.x[i]==rnd_){
		flg +=1 
	    }
	}
	if(flg==0){
	    vec_.append(rnd_)
	    //print rnd_
	}
    }
    return vec_
}

func vec_exists(){local rnd_,i localobj vec_
    vec_ = $o1
    rnd_ = $2
    for i=0, vec_.size()-1{
	if(rnd_==vec_.x[i]){
	    return 1
	}
    }
    return 0
}

objref nton_nclist, nton_GABAa, nton_GABAb
objref pn_nclist
proc ConnectNtoN_NET_GABA(){\
    local i, j, base_gid, this_gid, gmax_LtoPa, gmax_LtoPb, gmax_LtoLa, gmax_LtoLb,src_gid, pngid, lngid\
    localobj rnd, nc, nil, gaba,syn,rndvec
    if(pc.id==0)printf("ConnectNtoN_NET_GABA()\n")
    nton_nclist   = new List()
    nton_GABAa = new List()
    nton_GABAb = new List()
    pn_nclist  = new List()
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,1)
    base_gid = 200000

    gmax_LtoPa = GABAA_LTOP/NLN
    //gmax_LtoPa = GABAA_LTOP/NPN
    gmax_LtoLa = GABAA_LTOL/NLN
    gmax_LtoPb = GABAB_LTOP/NLN
    gmax_LtoLb = GABAB_LTOL/NLN
    printf("%f %f %f %f\n", gmax_LtoPa, gmax_LtoPb, gmax_LtoLa, gmax_LtoLb)
    printf("LNs.count: %d[%d]\n",LNs.count, pc.id)

    //--------------------------------------
    // MAKE PRESYNAPSE
    for i=0, LNs.count-1{
	nc = LNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid + LNs.o(i).getGID()
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	nton_nclist.append(nc)
	//printf("[PRE_GABA] gid: %d, LN's gid: %d, i: %d\n",this_gid,LNs.o(i).getGID(),i) 
    }
    for i=0, PNs.count-1{
	nc = PNs.o(i).connect2target(nil)
	nc.threshold = 1
	this_gid = base_gid + PNs.o(i).getGID()
	pc.set_gid2node(this_gid,pc.id)
	pc.cell(this_gid,nc)
	nton_nclist.append(nc)
	//printf("[PRE_GABA] gid: %d, LN's gid: %d, i: %d\n",this_gid,LNs.o(i).getGID(),i) 
    }
    //--------------------------------------
    // MAKE POSTSYNAPSE
    for i=0, PNs.count-1{
	rndvec = mkRndvec(NLN,int(NLN/2),pc.id+i)
	for j=0, NLN-1{
	    pngid = PNs.o(i).getGID()
	    if(GABAA_ON == 1){
		//if(rnd.repick()<PROB_LTOP){
		//if(((PNs.o(i).getGID()+j)%2==0)||(j==0)){
		//if((PNs.o(i).getGID()+j)%2==0){
		//if(vec_exists(rndvec,j)==1){
		if((j%NPN)==pngid){
		    gaba = PNs.o(i).mkNET_GABAa(gmax_LtoPa)
		    nton_GABAa.append(gaba)
		    src_gid = base_gid + j + NPN
		    nc = pc.gid_connect(src_gid,gaba)
		    //nc.delay  = 1.0
		    nc.delay  = 0.05
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    printf("[PST_GABAa] gid: %d, PN's gid: %d, i: %d, j: %d\n",src_gid,PNs.o(i).getGID(),i,j) 
		}
	    }
	    if(GABAB_ON == 1){
		//if(rnd.repick()<PROB_LTOP){
		//if((PNs.o(i).getGID()+j)%2==0){
		//if(vec_exists(rndvec,j)==1){
		if((j%NPN)==pngid){
		    gaba = PNs.o(i).mkNET_GABAb(gmax_LtoPb)
		    nton_GABAb.append(gaba)
		    src_gid = base_gid + j + NPN
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    printf("[PST_GABAb] gid: %d, PN's gid: %d, i: %d, j: %d\n",src_gid,PNs.o(i).getGID(),i,j) 
		}
	    }

	}
    }

    for i=0, LNs.count-1{
	rndvec = mkRndvec(NPN,int(NPN/2),pc.id+i)
	lngid  = LNs.o(i).getGID()
	for j=0, NPN-1{
	    if(PTOL_ON==1){
		//if(rnd.repick()<PROB_PTOL){
		//if(((LNs.o(i).getGID()+j)%2==0)||(j==0)){
		//if((LNs.o(i).getGID()+j)%2==0){
		//if(vec_exists(rndvec,j)==1){
		if((lngid-NPN)%NPN==j){
		    syn = LNs.o(i).setExp2Syn(0)
		    synlist.append(syn)
		    src_gid = base_gid+j
		    nc = pc.gid_connect(src_gid,syn)
		    nc.delay  = 1.0
		    nc.weight = WEIGHT_PTOL
		    pn_nclist.append(nc)
		    printf("[EXP2SYN] gid: %d, LN's gid: %d, i: %d, j: %d\n",src_gid,LNs.o(i).getGID(),i,j) 
		}
	    }
	}
	for j=0, NLN-1{
	    if((LNs.o(i).getGID()-NPN)==j){
		continue
	    }
	    if(GABAA_ON == 1){
		//if(rnd.repick()<=PROB_LTOL){
		if((lngid-j)%NPN==0){
		    gaba = LNs.o(i).mkNET_GABAa(gmax_LtoLa)
		    nton_GABAa.append(gaba)
		    src_gid = base_gid + j + NPN
		    nc = pc.gid_connect(src_gid,gaba)
		    //nc.delay  = 1.0
		    nc.delay  = 0.05
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAa] gid: %d, LN's gid: %d, i: %d\n",src_gid,LNs.o(i).getGID(),i) 
		}
	    }
	    if(GABAB_ON == 1){
		//if(rnd.repick()<=PROB_LTOL){
		if((lngid-j)%NPN==0){
		    gaba = LNs.o(i).mkNET_GABAb(gmax_LtoLb)
		    nton_GABAb.append(gaba)
		    src_gid = base_gid + j + NPN
		    nc = pc.gid_connect(src_gid,gaba)
		    nc.delay  = 1.0
		    nc.weight = 1.0
		    nton_nclist.append(nc)
		    //printf("[PST_GABAb] gid: %d, LN's gid: %d, i: %d\n",src_gid,LNs.o(i).getGID(),i) 
		}
	    }
	}
    }
}
mkNetwork(NCELL)

objref r_delay1, r_delay2, r_imax1, r_imax2
proc mkstim_random(){local i,imax1,imax2,Interval,delay2
    r_delay1 = new Random()
    r_delay2 = new Random()
    r_imax1 = new Random()
    r_imax2 = new Random()
    
    delay2 = 100
    r_delay1.uniform(0,50)
    r_delay2.uniform(delay2,delay2+50)
    //r_imax1.uniform(3800,3800)
    r_imax1.uniform(35000,35000)
    //r_imax2.uniform(9400,9400)
    r_imax2.uniform(15000,15000)
    Interval = 300
    /*
    if(pc.id == 0){
	imax1 = 80000
	imax2 = 31500
    }else if(pc.id == 1){
	imax1 = 29000
	imax2 = 17500
    }else if(pc.id == 2){
	imax1 = 18000
	imax2 = 14350
    }*/
    imax1 = 80000
    imax2 = 31500

    Interval = 300
    for i = 0, PNs.count -1 {
	PNs.object(i).Delay = r_delay1.repick()
	PNs.object(i).setIntermitStim_gaus(PNs.object(i).Delay,imax1,Interval,0,-1,0.00)
    }
    for i = 0, LNs.count -1{
	LNs.object(i).Delay = r_delay2.repick()
	LNs.object(i).setIntermitStim_gaus(LNs.object(i).Delay,imax2,Interval,0,-1,0.00)
    }
}

objref latencies, doses
proc mkSingleStim_DoseResponse(){\
    local i,j,gid,id,dose_log,latency\
    localobj rnd, fobj

    rnd = new Random(RND_SEED+pc.id)
    if(pc.id==0){
	printf("Dose Vector:")
	DOSE_V.printf()
	printf("\n")
    }
    latencies = new Vector()
    doses     = new Vector()

    strdef spiketiming
    /*
    for(i=pc.id; i<NCELL; i+=pc.nhost){
	if((i>=NPN+NLN) && (i<NCELL)){
	    j = (i-NPN-NLN)/pc.nhost
	    d = dose.x[int(j/NSYNAPSE)]
	    sprint(spt_file_dir,"../input/spiketiming/%ddose_1stims_filtering/",d)
	    sprint(spiketiming,"%sspt%03d.dat",spt_file_dir,int(rnd.uniform(0,999)))
	    print spiketiming," ", j, d
            RNs.o(j).setIClamp2(STOPTIME,dt,spiketiming)
	}
    }*/
    for(i=0; i<RNs.count();i=i+1){
	gid=RNs.o(i).getGID()
	id =gid-NPN-NLN
	d = DOSE_V.x[int(id/NSYNAPSE)]
	sprint(spt_file_dir,"../input/spiketiming/%ddose_1stims_filtering/",d)
	sprint(spiketiming,"%sspt%03d.dat",spt_file_dir,int(rnd.uniform(0,999)))
	//print spiketiming," ", id, d
        //RNs.o(i).setIClamp2(STOPTIME,dt,spiketiming)
	
	dose_log = log10(d)
	//printf("Dose[log] : %f %d\n",dose_log,d)
//	latency = RNs.o(i).setIClamp_with_Latency(STOPTIME,dt,spiketiming,gid,dose_log)
	latency = RNs.o(i).setIClamp_with_Latency(STOPTIME,dt,spiketiming,gid,3)
	latencies.append(latency)
	doses.append(dose_log)
	
    }
}

objref ic_list
proc mkIclamp_LN(){local i localobj ic
    ic_list = new List()
    //    for i=0, LNs.count()-1{
    for i=0, 0{
	ic = LNs.o(i).setIclamp(50,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(100,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(150,10,30)
	ic_list.append(ic)
	ic = LNs.o(i).setIclamp(200,10,30)
	ic_list.append(ic)
    }
}

proc mkIclamp_PN(){local i localobj ic
    ic_list = new List()
    for i=0, PNs.count()-1{
	ic = PNs.o(i).setIclamp(50,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(100,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(150,10,30)
	ic_list.append(ic)
	ic = PNs.o(i).setIclamp(200,10,30)
	ic_list.append(ic)
    }
}

proc mkStim(){
    //mkSerialStim()
    mkSingleStim_DoseResponse()
    //mkIclamp_LN()
    //mkIclamp_PN()
    //mkstim_random()
}
mkStim()

proc setVoltageRecord(){local i
    if(pc.id==0)printf("setVoltageRecord()\n")
    for i = 0, PNs.count()-1{
	PNs.object(i).setVoltageRecord()
    }
    for i = 0, LNs.count()-1{
	//if(pc.id%10==0){
	LNs.object(i).setVoltageRecord()
	//}
    }
    for i = 0, RNs.count()-1{
	if(i%100==0){
	    RNs.object(i).setVoltageRecord()
	}
    }
}

proc setSpikeRecord(){local i
    if(pc.id==0)printf("setSpikeRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).setSpikeRecord()
    }
    for i = 0, LNs.count -1{
	//if(pc.id%10==0){
	LNs.object(i).setSpikeRecord()
	//}
    }
    for i = 0, RNs.count -1{
	if(i%10==0){
	    RNs.object(i).setSpikeRecord()
	}
    }
}

proc setCurrentRecord(){local i
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).setCurrentRecord_nACh()
	//PNs.object(i).setCurrentRecord_exp2syn()
    }
}

objref tvec
proc setRecord(){
    if(pc.id==0)printf("setRecord()\n")
    tvec = new Vector()
    tvec.record(&t)

    setSpikeRecord()
    setVoltageRecord()
    setCurrentRecord()
}

setRecord()
//psection()
pc.barrier()
tstop = STOPTIME
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

strdef FPRINT_DIR
strdef SPIKEOUT_DIR

if(IS_SUPERCOMPUTER == 1){
    FPRINT_DIR = "./"
}else if(START_TIME == 0){
    FPRINT_DIR = "../single-result/record/"
    SPIKEOUT_DIR = "../single-result/spike/"
}else{
    sprint(FPRINT_DIR,"../single-result/%010d/record/",START_TIME)
    sprint(SPIKEOUT_DIR,"../single-result/%010d/spike/",START_TIME)
}

print FPRINT_DIR
proc printSpikeRecord(){local i
    if(pc.id==0)printf("printSpikeRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).printSpikeRecord_DoseResponse(pc.id,PNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	//PNs.object(i).printSpikeRecord_NetStim(pc.id,PNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
    }
    for i = 0, LNs.count -1{
	//if(pc.id%10==0){
	LNs.object(i).printSpikeRecord_DoseResponse(pc.id,LNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	//LNs.object(i).printSpikeRecord_NetStim(pc.id,LNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	//}
    }
    for i = 0, RNs.count -1{
	if(i%10==0){
	    RNs.object(i).printSpikeRecord(pc.id,RNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	}
    }
}

proc printVoltageRecord(){
    if(pc.id==0)printf("printVoltageRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).printVoltageRecord(pc.id,PNs.o(i).getGID(),FPRINT_DIR,tvec)
    }
    for i = 0, LNs.count -1{
	//if(pc.id%10==0){
	LNs.object(i).printVoltageRecord(pc.id,LNs.o(i).getGID(),FPRINT_DIR,tvec)
	//}
    }
    for i = 0, RNs.count -1{
	if(i%100==0){
	    RNs.object(i).printVoltageRecord(pc.id,RNs.o(i).getGID(),FPRINT_DIR,tvec)
	}
    }
}

proc printCurrentRecord(){local i
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, PNs.count -1{
	PNs.object(i).printCurrentRecord_nACh(PNs.o(i).getGID(),FPRINT_DIR,tvec)
	//PNs.object(i).printCurrentRecord_exp2syn(PNs.o(i).getGID(),FPRINT_DIR,tvec)
    }
}

proc printLatency(){localobj fobj, mt
    if(pc.id==0)printf("Latency()\n")
    mt = new Matrix()
    fobj = new File()
    
    mt.resize(doses.size(),2)
    mt.setcol(0,doses)
    mt.setcol(1,latencies)
    strdef _FPRINT_NAME_
    sprint(_FPRINT_NAME_,"%sLatencies_%d.txt",SPIKEOUT_DIR,pc.id)
    fobj.wopen(_FPRINT_NAME_)
    mt.fprint(fobj,"%5.5f\t")
    fobj.close()
}

proc setPrinter(){
    printSpikeRecord()
    printCurrentRecord()
    printVoltageRecord()
    printLatency()
}
setPrinter()

{pc.runworker()}
{pc.done()}
quit()