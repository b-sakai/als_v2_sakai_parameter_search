{load_file("nrngui.hoc")}
{load_file("Stick_V2.hoc")}
{load_file("ranstream.hoc")}

//************************************************
if(name_declared("STOPTIME")!=5){ execute("STOPTIME=50")}
if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
if(name_declared("WEIGHT_RNtoPN")!=5){ execute("WEIGHT_RNtoPN=0.1")}
if(name_declared("WEIGHT_RNtoLN")!=5){ execute("WEIGHT_RNtoLN=0.05")}
if(name_declared("RND_SEED")!=5){ execute("RND_SEED=0")}

//************************************************
// FOR dose-response-SingleCore.hoc
if(name_declared("CELL_TYPE")!=5){ execute("CELL_TYPE=1")}
if(name_declared("NCELL")!=5){ execute("NCELL=1")}
if(name_declared("NRN")!=5){ execute("NRN=100")}
if(name_declared("PN_NACH_GMAX")!=5){ execute("PN_NACH_GMAX=100")}
if(name_declared("LN_NACH_GMAX")!=5){ execute("LN_NACH_GMAX=100")}

objref pc
pc = new ParallelContext()

if(RND_SEED==0){
    RND_SEED=0
}else if(RND_SEED!=0){
    RND_SEED=START_TIME
}

if(pc.id==0){
    printf("********************************************************\n")
    printf("dose-response-SingleCore.hoc [%d]\n",START_TIME)
    printf("CELL_TYPE:%3d\tNCELL:%3d\tNRN:%3d\n",CELL_TYPE,NCELL,NRN)
    printf("WEIGHT_RNtoPN:%3f\tWEIGHT_RNtoLN:%3f\n",WEIGHT_RNtoPN,WEIGHT_RNtoLN)
    printf("PN_NACH_GMAX:%3f\n",PN_NACH_GMAX)
    printf("********************************************************\n")
}


objref cells, nclist

proc mkNetwork(){
    if(pc.id==0)printf("mkNetwork()\n")
    mkCells($1)
    print_CellList()
}

objref DOSE_V
DOSE_V = new Vector()
DOSE_V.append(10,20,50,100,200,500,1000,2000,5000,10000)
//DOSE_V.append(0.1,1,10)

{load_file("ReadSPT.hoc")}
proc mkCells(){local i,ncell localobj cell, nc, nil, syn
    if(pc.id==0){
	printf("mkCells()\n")
    }
    cells = new List()
    //for(i=pc.id; i<NCELL; i+=pc.nhost){
    for(i=pc.id; i<NCELL; i+=pc.nhost){
	cell = new Stick()
	//cells.append(cell)
	if(CELL_TYPE==1){
	    //printf("MAKE PN:%d[%d]\n",i,pc.id)
	    //cell.insertFukuda(i)
	    cell.insertMsPN(i)
	    //cell.insertMsPN_cad(i)
	    //cell.insertMsPN_NoCad(i)
	    //cell.insertFukuda_tunned()

	    cell.soma{
		//gkcabar_GPeA = 0
		//gnabar_GPeA = 0
		//gkdrbar_GPeA= 0
		S_sk_MsPN = 50
	    }

	    //cell.soma.gkcabar_GPeA = 0
	    cell.setType(1)
	    //cell.setPN_biophys()
	    NACH_GMAX = PN_NACH_GMAX
	}else if(CELL_TYPE==2){
	    //printf("MAKE LN:%d[%d]\n",i,pc.id)
	    cell.insertLNlla()
	    cell.setType(2)
	    NACH_GMAX = LN_NACH_GMAX
	}else{
	    printf("[ERROR] mkcells()[%d]",pc.id)
	    quit()
	}
	cell.Delay=10.0
	cell.setGID(i)
	
	cell.dose=DOSE_V.x[i]
	cells.append(cell)
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
	//psection()
    }
    pc.multisplit()
}
proc print_CellList(){
    if(pc.id==0){
	printf("[CELL_LIST]\n")
	printf("PC.ID\tCELL\n")
    }
    pc.barrier()
    printf("%d\t%d\n",pc.id, cells.count)
}
mkNetwork(NCELL)

obfunc setVecStim(){localobj vs, spvec
    spvec = $o1
    vs = new VecStim(0.5)
    vs.play(spvec)
    return vs
}

objref spvecs, vses, ncs, pst_synapses
proc mkArtificial_RN(){local i, j, dose, gid localobj spvec, vs, nc, pst_synapse
    strdef _SPT_DIR_,_SPT_NAME_
    spvecs = new List()
    vses   = new List()
    ncs    = new List()
    pst_synapses = new List()
    
    if(pc.id==0){printf("mkArtificial_RN()\n")}

    for(j=0; j<cells.count(); j=j+1){
	dose = cells.o(j).dose
	for(i=0; i<NRN; i=i+1){
	    sprint(_SPT_DIR_,"../input/spiketiming/%ddose_1stims_filtering/",dose)
	    
	    sprint(_SPT_NAME_,"%sspt%03d.dat",_SPT_DIR_,i)
	    
	    spvec = readSpikeTiming(_SPT_NAME_)
	    /*
	    //spvec = new Vector()
	    //spvec.append(1,5,10)
	    gid = cells.o(j).getGID()
	    //if(gid==0){spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))}	    
	    spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))
	    */

	    //if(i==0)spvec.printf()
	    vs    = setVecStim(spvec)
	    pst_synapse = cells.o(j).mkNET_nACh(NACH_GMAX)
	    nc = cells.o(j).connectVecStim(vs,pst_synapse)
	    spvecs.append(spvec)
	    vses.append(vs)
	    ncs.append(nc)
	    pst_synapses.append(pst_synapse)
	}
    }
}
proc mkArtificial_RN_yuqiao(){local i, j, dose, gid localobj spvec, vs, nc, pst_synapse
    strdef _SPT_DIR_,_SPT_NAME_
    spvecs = new List()
    vses   = new List()
    ncs    = new List()
    pst_synapses = new List()
    
    if(pc.id==0){printf("mkArtificial_RN()\n")}

    for(j=0; j<cells.count(); j=j+1){
	dose = cells.o(j).dose
	for(i=0; i<NRN; i=i+1){
	    //sprint(_SPT_DIR_,"../input/spiketiming/%ddose_1stims_filtering/",dose)
	    
	    if(dose==0.1){
		sprint(_SPT_DIR_,"../input/spiketiming/0.1dose_1stims_yuqiao/")
	    }else{
		sprint(_SPT_DIR_,"../input/spiketiming/%ddose_1stims_yuqiao/",dose)
	    }
	    
	    sprint(_SPT_NAME_,"%sspt%03d.dat",_SPT_DIR_,i)
	    
	    spvec = readSpikeTiming_yuqiao(_SPT_NAME_)
	    /*
	    //spvec = new Vector()
	    //spvec.append(1,5,10)
	    gid = cells.o(j).getGID()
	    //if(gid==0){spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))}	    
	    spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))
	    */

	    //if(i==0)spvec.printf()
	    vs    = setVecStim(spvec)
	    pst_synapse = cells.o(j).mkNET_nACh(NACH_GMAX)
	    nc = cells.o(j).connectVecStim(vs,pst_synapse)
	    spvecs.append(spvec)
	    vses.append(vs)
	    ncs.append(nc)
	    pst_synapses.append(pst_synapse)
	}
    }
}

proc mkArtificial_RN_Single_Post_Syanpse(){local i, j, dose, gid localobj spvec, vs, nc, pst_synapse
    strdef _SPT_DIR_,_SPT_NAME_
    spvecs = new List()
    vses   = new List()
    ncs    = new List()
    pst_synapses = new List()
    
    if(pc.id==0){printf("mkArtificial_RN_Single_Post_Synapse()\n")}

    for(j=0; j<cells.count(); j=j+1){
	dose = cells.o(j).dose
	pst_synapse = cells.o(j).mkNET_nACh(NACH_GMAX)
	for(i=0; i<NRN; i=i+1){
	    sprint(_SPT_DIR_,"../input/spiketiming/%ddose_1stims_filtering/",dose)
	    sprint(_SPT_NAME_,"%sspt%03d.dat",_SPT_DIR_,i)
	    
	    //spvec = readSpikeTiming(_SPT_NAME_)
	    
	    spvec = new Vector()
	    //spvec.append(1,5,10)
	    gid = cells.o(j).getGID()
	    //if(gid==0){spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))}	    
	    //spvec.indgen(5+i/10.0,500,10.0/(gid+1.0))
	    spvec.indgen(10,500,5)
	    
	    //if(i==0)spvec.printf()
	    vs    = setVecStim(spvec)
	    nc = cells.o(j).connectVecStim(vs,pst_synapse)
	    spvecs.append(spvec)
	    vses.append(vs)
	    ncs.append(nc)
	}
	pst_synapses.append(pst_synapse)
    }
}

proc mkStim(){
    mkArtificial_RN()
    //mkArtificial_RN_yuqiao()
    //mkArtificial_RN_Single_Post_Syanpse()
}
mkStim()

proc setSpikeRecord(){local i
    if(pc.id==0)printf("setSpikeRecord()\n")
    for i = 0, cells.count -1{
	cells.object(i).setSpikeRecord()
    }
}

proc setNCRecord(){local i, j
    if(pc.id==0)printf("setNCRecord()\n")
    for i = 0, cells.count()-1{
	cells.o(i).setNCRecord()
    }
}

proc setCurrentRecord(){local i
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, cells.count -1{
	//PNs.object(i).setCurrentRecord_exp2syn()
	cells.object(i).setCurrentRecord_nACh()
	//cells.object(i).setCurrentRecord_iSK()
    }
}

objref records, rec_names, rec_ids, rec_types
proc Recorder(){localobj name, rec,type
    name = new String($s2)
    type = new String($s3)
    rec = new Vector()
    rec.record(&$&1)
    records.append(rec)
    rec_names.append(name)
    rec_types.append(type)
    rec_ids.append($4)
}

proc mkRecorder(){local i
   if(pc.id==0)printf("mkRecorder()\n")
   records = new List()
   rec_names = new List()
   rec_types = new List()
   rec_ids = new Vector()

   for i = 0, cells.count -1{
       Recorder(&cells.o(i).soma.v(0.5),"PN","Voltage",cells.o(i).getGID())

       // for MsPN
       Recorder(&cells.o(i).soma.CaM_MsPN(0.5),"CaM","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.Csk_MsPN(0.5),"Csk","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.q_inf_MsPN(0.5),"q_inf","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.ena_MsPN(0.5),"ena","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.ek_MsPN(0.5),"ek","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.eca_MsPN(0.5),"eca","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ica_MsPN(0.5),"ica","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.isk_MsPN(0.5),"isk","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ina_MsPN(0.5),"ina","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ik_MsPN(0.5),"ik","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.iA_MsPN(0.5),"iA","Current",cells.o(i).getGID())

       /*
       // for MsPN_cad
       Recorder(&cells.o(i).soma.CaM_MsPN_cad(0.5),"CaM","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.Csk_MsPN_cad(0.5),"Csk","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.q_inf_MsPN_cad(0.5),"q_inf","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.ena_MsPN_cad(0.5),"ena","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.ek_MsPN_cad(0.5),"ek","Record",cells.o(i).getGID())
       //Recorder(&cells.o(i).soma.eca_MsPN_cad(0.5),"eca","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ica_MsPN_cad(0.5),"ica","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.isk_MsPN_cad(0.5),"isk","Current",cells.o(i).getGID())
       */
       
       /*
       // for GPeA
       Recorder(&cells.o(i).soma.q_inf_GPeA(0.5),"q_inf","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.Csk_GPeA(0.5),"Csk","Record",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ica_GPeA(0.5),"ica","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ikAHP_GPeA(0.5),"isk","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ina_GPeA(0.5),"ina","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.ik_GPeA(0.5),"ik","Current",cells.o(i).getGID())
       Recorder(&cells.o(i).soma.iA_GPeA(0.5),"iA","Current",cells.o(i).getGID())
       */
   }
}

objref tvec
proc setRecord(){localobj sref
    if(pc.id==0)printf("setRecord()\n")
    tvec = new Vector()
    tvec.record(&t)
    setSpikeRecord()
    //    setVoltageRecord()
    setCurrentRecord()
    setNCRecord()
    //cells.o(0).soma sref = new SectionRef()
    mkRecorder()
}

setRecord()

psection()
pc.barrier()
tstop = STOPTIME
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}

strdef FPRINT_DIR
strdef SPIKEOUT_DIR

if(IS_SUPERCOMPUTER == 1){
    FPRINT_DIR = "./"
}else if(START_TIME == 0){
    FPRINT_DIR = "../single-result/record/"
    SPIKEOUT_DIR = "../single-result/spike/"
}else{
    sprint(FPRINT_DIR,"../single-result/%010d/record/",START_TIME)
    sprint(SPIKEOUT_DIR,"../single-result/%010d/spike/",START_TIME)
}

print FPRINT_DIR
proc printSpikeRecord(){local i
    if(pc.id==0)printf("printSpikeRecord()\n")
    for i = 0, cells.count -1{
	cells.object(i).printSpikeRecord_DoseResponse(pc.id,cells.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
	//PNs.object(i).printSpikeRecord_NetStim(pc.id,PNs.o(i).getGID(),STOPTIME,SPIKEOUT_DIR)
    }
}

proc printCurrentRecord(){local i
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, cells.count -1{
	cells.object(i).printCurrentRecord_nACh(cells.o(i).getGID(),FPRINT_DIR,tvec)
	//cells.object(i).printCurrentRecord_iSK(cells.o(i).getGID(),FPRINT_DIR,tvec)
	//cells.object(i).printCurrentRecord_exp2syn(cells.o(i).getGID(),FPRINT_DIR,tvec)
    }
}

proc printNCRecord(){local i, j
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, cells.count -1{
	cells.o(i).printNCRecord(cells.o(i).getGID(),SPIKEOUT_DIR)
    }
}

proc mkPrinter(){local id,i localobj tvec,mt, fobj
    strdef _FPRINT_DIR_,_FPRINT_NAME_
    _FPRINT_DIR_= $s1
    tvec = $o2
    for i=0,records.count-1{
	mt = new Matrix()
	fobj = new File()
	
	//tvec.printf()
	mt.resize(tvec.size(),2)
	mt.setcol(0,tvec)
	mt.setcol(1,records.o(i))
	
	//mt.printf("%5.5f\t")
	sprint(_FPRINT_NAME_,"%s%s_%s_%d.txt",_FPRINT_DIR_,rec_types.o(i).s,rec_names.o(i).s,rec_ids.x[i]) 
	fobj.wopen(_FPRINT_NAME_)
	mt.fprint(fobj,"%5.5f\t")
	fobj.close()
    }
}

proc setPrinter(){
    printSpikeRecord()
    printCurrentRecord()
    //printVoltageRecord()
    printNCRecord()
    mkPrinter(FPRINT_DIR,tvec)
}

proc CalcPeakISF(){local i, peak
    if(pc.id==0)printf("setCurrentRecord()\n")
    for i = 0, cells.count -1{
	peak = cells.o(i).CalcPeakISF(cells.o(i).tvecSR)
	//printf("[%d] Cells.o[%d] : %f\n",pc.id, i, peak)
    }
}

setPrinter()
CalcPeakISF()

{pc.runworker()}
{pc.done()}
quit()