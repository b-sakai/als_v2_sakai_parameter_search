{load_file("nrngui.hoc")}
{load_file("stdlib.hoc")}
{load_file("Stick_V2.hoc")}
{load_file("ReadSPT.hoc")}
//{load_file("CellSwc2.hoc")}
//{load_file("areaList.hoc")}
//{load_file("exSectionList.hoc")}

/*
Dose Response Curve Parameter Estimation Program
*/

// Modify makeCells() and initModel() 
//=== MODEL PARAMETERS ===
if(name_declared("GKDRBAR")!=5){ execute("GKDRBAR=0.7") }
if(name_declared("GNABAR")!=5){ execute("GNABAR=1.2") }
if(name_declared("CM")!=5){ execute("CM=1") }
if(name_declared("GL")!=5){ execute("GL=0.00035") }
if(name_declared("EL")!=5){ execute("EL=-60") }

if(name_declared("GCATBAR")!=5){ execute("GCATBAR=0.001") }
if(name_declared("GSKBAR")!=5){ execute("GSKBAR=0.002") }
if(name_declared("GABAR")!=5){ execute("GABAR=0.022") }
if(name_declared("SSK")!=5){ execute("SSK=0.000050") }

if(name_declared("PN_NACH_GMAX")!=5){ execute("PN_NACH_GMAX=0.3")}
if(name_declared("LN_NACH_GMAX")!=5){ execute("LN_NACH_GMAX=0.3")}
//========================
if(name_declared("FREQ")!=5){ execute("FREQ=100") }
if(name_declared("AMP_SIN")!=5){ execute("AMP_SIN=0.3") }
if(name_declared("AMP_RAMP")!=5){ execute("AMP_RAMP=1.5") }
if(name_declared("REP_STIM")!=5){ execute("REP_STIM=1") }
if(name_declared("DEBUG_MSG")!=5){ execute("DEBUG_MSG=0") }
if(name_declared("ESTIMATION")!=5){ execute("ESTIMATION=1") }
if(name_declared("SIM_TARGET")!=5){ execute("SIM_TARGET=1") }
if(name_declared("LOG_FITNESS")!=5){ execute("LOG_FITNESS=0") }
if(name_declared("SETTINGFILE_SUF")!=5){ execute("SETTINGFILE_SUF=10") }
if(name_declared("NUM_OF_TARGETFILE")!=5){ execute("NUM_OF_TARGETFILE=1") }
if(name_declared("INDEX_OUTPUT")!=5){ execute("INDEX_OUTPUT=0") }
if(name_declared("USE_TARGETPARAMS")!=5){ execute("USE_TARGETPARAMS=0") }
if(name_declared("THRESHOLD")!=5){ execute("THRESHOLD=-20") }

if(name_declared("CELL_TYPE")!=5){ execute("CELL_TYPE=1") }
if(name_declared("STOPTIME")!=5) { execute("STOPTIME=100") }
if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
if(name_declared("NRN")!=5){ execute("NRN=100")}
if(name_declared("RND_SEED")!=5){ execute("RND_SEED=0")}
if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
NCELLS = 1

DIM_CMAES = -1
NUM_OF_POP_PER_PROC = -1
FLG_CMAES_STOP = 0
STOPTIME_DEFAULT = 300
TARGETSUF_DEFAULT = 10
PARAMSUF_DEFAULT = 10
CURRENTSUF_DEFAULT = -1
ELECTRODESUF_DEFAULT = -1
STIM_INITIALIZED = 0

strdef FILENAME_PRINT
FILENAME_PRINT = "voltage.dat"

if(name_declared("DIR_TARGET")==0) { 
	execute("strdef DIR_TARGET DIR_TARGET=\".\"")
}
if(name_declared("SWC_FILENAME")==0) { 
	execute("strdef SWC_FILENAME SWC_FILENAME=\"./050622_4_sn.swc\"")
}

objref cells
//objref nclist
objref g_ncstim_list
objref g_stim_list, ncstim
objref target_time_vec_list, target_volt_vec_list, target_stim_vec_list, target_volt_vec_for_eval_list, target_volt_vec_for_eval_list_rev
objref ref_time_vec_list, ref_stim_vec_list
objref g_spike_time_vec, g_spike_id_vec
objref g_volt_time_vec, g_volt_obs_vec_list
objref g_spike_time_vec_list, g_spike_id_vec_list
objref g_spike_time_vec_list_target, g_spike_id_vec_list_target
objref g_cur_stim_vec_list
objref spikegenlist, noaxonlist, cellbodylist, axonlist, dendlist // now assume NCELLS equals 1
// if NELLS != 1, these SectionLists must be list of SectionList
objref stim_points, measure_points, num_stim_points, num_measure_points
objref paramname_list
paramname_list = new List()
objref targetfile_suf, currentfile_suf, paramfile_suf, electrodefile_suf

strdef SETTINGFILE

objref pc
pc = new ParallelContext()

objref DOSE_V, PEAKISF_V
DOSE_V = new Vector()
PEAKISF_V = new Vector()
//DOSE_V.append(10,20,50,100,200,500,1000,2000,5000,10000)
//DOSE_V.append(1,10,100,1000,5000)
DOSE_V.append(10,100,1000,5000)
//PEAKISF_V.append(25,80,170,260,270)
PEAKISF_V.append(80,170,260,270)

//-- make CellSwc object --
proc mkCells(){local i, j, n, axonnum, ncells localobj cell, nc, nil, tmplist
    ncells = $1
    cells = new List()
    
    for(i=pc.id; i<pc.id+ncells; i+=pc.nhost){
	cell = new Stick()
	if(CELL_TYPE==1){
	    //printf("MAKE PN:%d[%d]\n",i,pc.id)
	    //cell.insertFukuda(i)
	    //cell.insertFukuda_tunned()
	    cell.insertMsPN(i)
	    cell.setType(1)
	    //cell.setPN_biophys()
	    NACH_GMAX = PN_NACH_GMAX
	}else if(CELL_TYPE==2){
	    //printf("MAKE LN:%d[%d]\n",i,pc.id)
	    cell.insertLNlla()
	    cell.setType(2)
	    NACH_GMAX = LN_NACH_GMAX
	}else{
	    printf("[ERROR] mkcells()[%d]",pc.id)
	    quit()
	}
	cell.Delay=10.0
	cell.setGID(i)
	cells.append(cell)
	pc.set_gid2node(i,pc.id)
	nc = cell.connect2target(nil)
	pc.cell(i,nc)
    }
    pc.multisplit()
}

//-- init neuron model before the simulation -- 
proc initModel() { local i, j, axonnum, ncells, v_init localobj tmplist
	ncells = $1
	
	for i=0, cells.count()-1{
	    cells.o(i).uninsertPas()
	    cells.o(i).uninsertHH()

	    if(CELL_TYPE==1){
		//cell.uninsertFukuda()
		cells.o(i).uninsertMsPN(1)
	    }else if(CELL_TYPE==1){
		cells.o(i).uninsertLNlla()
	    }
	}

	for i=0, cells.count()-1{
	    if(CELL_TYPE==1){
		//cell.insertFukuda()
		cells.o(i).insertMsPN(1)
		cells.o(i).soma{
		    gnabar_MsPN  = GNABAR
		    gkdrbar_MsPN = GKDRBAR
		    gl_MsPN      = GL
		    gcatbar_MsPN = GCATBAR
		    gskbar_MsPN  = GSKBAR
		    gAbar_MsPN   = GABAR
		    S_sk_MsPN    = SSK
		}
	    }else if(CELL_TYPE==1){
		cells.o(i).insertLNlla()
		cells.o(i).soma{
		}
	    }
	}
	stdinit()
}

obfunc setVecStim(){localobj vs, spvec
    spvec = $o1
    vs = new VecStim(0.5)
    vs.play(spvec)
    return vs
}

objref spvecs, vses, nclist, pst_synapses
proc mkArtificial_RN() { local i, j, gid, dose localobj spvec, vs, nc, pst_synapse
    strdef _SPT_DIR_,_SPT_NAME_
    //printf("mkArtificial_RN(%d)0\n",dose)
    /*
    spvecs = new List()
    vses   = new List()
    ncs    = new List()
    printf("mkArtificial_RN(%d)0.5\n",dose)
    pst_synapses = new List()
    */
    //printf("mkArtificial_RN(%d)0.2\n",dose)
    //print nclist, nclist.count()

    //print nclist, nclist.count()
    //ncs_ = new List()
    nclist.remove_all()
    spvecs.remove_all()
    //printf("mkArtificial_RN(%d)0.1\n",dose)
    vses.remove_all()
    //printf("mkArtificial_RN(%d)0.3\n",dose)
    //print pst_synapses
    pst_synapses.remove_all()
    //printf("mkArtificial_RN(%d)1\n",dose)
    dose = $1
    //if(pc.id==0){printf("mkArtificial_RN()\n")}
    //printf("mkArtificial_RN(%d)2\n",dose)
    //for(j=0; j<cells.count(); j=j+1){
    for(i=0; i<NRN; i=i+1) {
	sprint(_SPT_DIR_,"../input/spiketiming/%ddose_1stims_filtering/",dose)
	sprint(_SPT_NAME_,"%sspt%03d.dat",_SPT_DIR_,i)
	
	spvec = readSpikeTiming(_SPT_NAME_)
	
	vs    = setVecStim(spvec)
	pst_synapse = cells.o(0).mkNET_nACh(NACH_GMAX)
	nc = cells.o(0).connectVecStim(vs,pst_synapse)
	spvecs.append(spvec)
	vses.append(vs)
	nclist.append(nc)
	pst_synapses.append(pst_synapse)
    }
    //printf("mkArtificial_RN(%d)E\n",dose)
}

//-- read parameter range file --
obfunc readParamFile() { local dim, flg, val localobj f, paramname, sf, vec
	strdef filename, line, tmp
	//sprint(filename, "%s/params%02d.txt", DIR_TARGET, paramfile_suf.x(0))
	sprint(filename, "%s/params10.txt", DIR_TARGET)

	vec = new Vector()	
	f = new File()
	{ f.ropen(filename) }
	
	sf = new StringFunctions()
	dim = 0
	while( f.gets(line) != -1 ) {
		if( sf.tail(line, "#", tmp) == 1 ) { continue } // comments
		{sscanf(line, "%s\t%*lf\t%*lf\t%lf\n", tmp, &val)}
		paramname = new String(tmp)
		paramname_list.append(paramname)
		vec.append(val)
		dim += 1
	}
	
	DIM_CMAES = dim
	return vec
}

//-- update global parameter values --
proc updateParams() { local i, idx_start localobj param_vec
	param_vec = $o1
	idx_start = $2

	strdef stmt
	
	for(i = 0; i < DIM_CMAES; i+=1) {
		sprint(stmt, "%s = %f", paramname_list.object(i).s, param_vec.x(idx_start+i))
		{ execute(stmt) }
	}
}

proc setSpikeRecord(){local i
    //if(pc.id==0)printf("setSpikeRecord()\n")
    //for i = 0, cells.count -1{
    cells.o(0).setSpikeRecord()
    //}
}

func CalcPeakISF(){local i, peak
    /*
    for i = 0, cells.count -1{
	peak = cells.o(i).CalcPeakISF(cells.o(i).tvecSR)
	//printf("[%d] Cells.o[%d] : %f\n",pc.id, i, peak)
    }*/
    return cells.o(0).CalcPeakISF(cells.o(0).tvecSR)
}

// --- fitness function ---
func LeastSquares(){local i, sum, pow localobj real_value, simul_value
    simul_value = $o1
    real_value = $o2
    sum = 0
    /*
    for i=0, real_value.size(){
	sum += (simul_value.x[i] - real_value.x[i])^2
    }
    */
    print real_value.size()
    for i=0, real_value.size()-1{
	print i
	pow = (simul_value.x[i] - real_value.x[i])^2
	sum += pow/(real_value.x[i]^2)
    }
    return sum
}

// --- receive CMA-ES info from master ---
proc receiveInfo() { local root localobj vec
	// [num_of_pop_per_process, targetNum, paramfile_suf]
	root = 0
	vec = new Vector()
	pc.broadcast(vec, root)

	NUM_OF_POP_PER_PROC = int(vec.x(0))
	SETTINGFILE_SUF = int(vec.x(1))
	// TARGETFILE_SUF = int(vec.x(1))
	// PARAMFILE_SUF = int(vec.x(2))
	// CURRENTFILE_SUF = int(vec.x(3))
	// ELECTRODEFILE_SUF = int(vec.x(4))
}
/*
// --- exec simulation (for debug) ---
proc simulation() { localobj vec
    start_time = pc.time
	
	sprint(SETTINGFILE, "%s/settings%02d.txt", DIR_TARGET, SETTINGFILE_SUF)
	readSettingFile(SETTINGFILE)
	
	if(USE_TARGETPARAMS==1) {
		vec = readParamFile()
		updateParams(vec, 0)
	}

	setElectrodePoints()

    makeCells(NCELLS)

	initModel(NCELLS)
	
	setStimVec()
	setIClamp(INDEX_OUTPUT)
	
	setSpikeRecord()
    setVoltageRecord()
    setCurrentRecord()
    tstop = STOPTIME
    pc.set_maxstep(10)
    stdinit()
    
    pc.barrier()
    modelfin_time = pc.time
    start_waittime = pc.wait_time
    
    //forall{ psection() }
    //topology()
    
    pc.psolve(tstop)

    pc.barrier()
	stop_time = pc.time
    if(pc.id ==0 && DEBUG_MSG==1){
		printf("[Process=%d, Thread=%d]\n", pc.nhost, pc.nthread)
        printf(" * NCELL=%d, NSTEP=%d (STOPTIME=%f / dt=%f)\n", NCELLS, STOPTIME/dt, STOPTIME, dt)
		printf(" * step : %f sec, wait : %f sec, send : %f sec\n", pc.step_time(), pc.wait_time()-start_waittime, pc.send_time)
		printf(" * modeling time : %f sec\n", modelfin_time - start_time)
        printf(" * core time : %f sec\n", stop_time-modelfin_time)
	
    }
        
    //printSpike()
    //writeRecord()
    //writeVoltage()
	if(pc.id==0) {
		printVoltage(0, INDEX_OUTPUT)
	}
	// printVoltage(0)
}
*/

// === MAIN FUNCTION ===
proc main() { local i, k, root, fitness, tempfit, peak localobj rcv_pop_vec, send_fit_vec, nullvec, tempvec, vec, Simul_value
    {pc.set_parent_comm()}
    print "main()"
    //receiveInfo()
    //sprint(SETTINGFILE, "%s/settings%02d.txt", DIR_TARGET, SETTINGFILE_SUF)
    //loadSettingFile(SETTINGFILE)
    //setElectrodePoints()
    //loadTargetData()
    //vec = readParamFile()
    if(USE_TARGETPARAMS==1) {
	updateParams(vec, 0)
    }
    
    {pc.set_world_comm()}
    mkCells(NCELLS)
    initModel(NCELLS)

    spvecs = new List()
    vses   = new List()
    nclist = new List()
    pst_synapses = new List()

    mkArtificial_RN(10)
    //setStimVec()
    //setIClamp(0)
    //setSpikeRecord()
    //setVoltageRecord()
    //setCurrentRecord()

    setSpikeRecord()

    tstop = STOPTIME
    pc.set_maxstep(10)
    stdinit()
    
    root = 0
    nullvec = new Vector()
    tempvec = new Vector()
    
    {pc.set_parent_comm()}
    pc.barrier()
    while(1) {
	{pc.set_parent_comm()}
	
	rcv_pop_vec = new Vector()
	NUM_OF_POP_PER_PROC =1
	send_fit_vec = new Vector(NUM_OF_POP_PER_PROC)
	
	pc.scatter_d(nullvec, rcv_pop_vec, DIM_CMAES*NUM_OF_POP_PER_PROC, root)
	
	{pc.set_world_comm()}
	for(i = 0; i < NUM_OF_POP_PER_PROC; i+=1) {
	    fitness = 0.0
	    updateParams(rcv_pop_vec, i*DIM_CMAES)
	    //for(k = 0; k < NUM_OF_TARGETFILE; k+=1) {
	    Simul_value = new Vector()
	    for(k = 0; k < DOSE_V.size(); k+=1) {
		mkArtificial_RN(DOSE_V.x[k])
		initModel(NCELLS)
		//print DOSE_V.x[k]

		//printf("pc.psolve(%d)\n",tstop)
		//pc.set_maxstep(10)
		//stdinit()
		pc.psolve(10)
		peak = CalcPeakISF()
		Simul_value.append(peak)
		//tempfit = evalFitness(k)
		/*
		if( LOG_FITNESS == 1 ) {
		    if( tempfit == 0 ) { 
			tempfit = -1e100 
		    } else { 
			tempfit = log10(tempfit)
		    }
		}*/
		//fitness += tempfit
	    }
	    printf("LeastSquares()\n")
	    print Simul_value.size(), PEAKISF_V.size()
	    printf("send_fit_vex.x(%d)\n",i)
	    send_fit_vec.x(i) = LeastSquares(Simul_value, PEAKISF_V)
	    //send_fit_vec.x(i) = fitness
	    printf("roof\n")
	}
	{pc.set_parent_comm()}
	pc.gather_d(send_fit_vec, nullvec, NUM_OF_POP_PER_PROC, root)
	
	// check whether terminal criterion of CMA-ES holds
	pc.broadcast(tempvec, root)
	//FLG_CMAES_STOP = int(tempvec.x(0))
	FLG_CMAES_STOP = 1
	if( FLG_CMAES_STOP!=0 ) { break }
    }	
}


// ======
if(ESTIMATION == 1) {
    main()
} else {
    //simulation()
}
{ pc.set_world_comm() }
{ pc.barrier() }
{ pc.runworker() }
{ pc.done() }
{ quit() }
