{load_file("stdlib.hoc")}
//***************************************
// 2015.05.20 setExpSyn added

// 2015.08.06
// This Stick file is changed to make realistic antennal lobe model

begintemplate Stick

public soma
public biophys, connect2target, setGABAlla,setGABAllb, setIclamp, setStim, setExp2Syn, setExpSyn
public setgaba, setIntermitStim, setIntermitStim1
public insertPN, insertLNlla,insertLNllb, insertFukuda, insertPas, insertHH
public insertMsLN, insertIAHP, insertICA,insertIAHP2, insertCAD, insertLNlla2, insertLNlla3
public insertLNlla4, insertLNllb2, insertHH_RN, insertType2LN, insertFukuda_tunned
public setVoltageRecord, printVoltageRecord, printVoltageRecord2
public synlist
public type, setType
public setSpikeRecord, printSpikeRecord, Delay
public setIClamp2, setIClamp_with_Latency, setRN_biophys

public gaba, setGABA, setNET_GABA, setGABAb
public mkNET_GABAa,mkNET_GABAb,mkNET_nACh
public imax
public setGID, getGID, gid
objref mechname[10]
objref typename[6]
objref this
objref gabaa_list, gabab_list
objref synlist

public dose
proc init(){
    for i=0,10-1{
	mechname[i] = new String()
    }
    for i = 0, 6-1{
	typename[i] = new String()
    }
    mechname[0].s = "default"
    mechname[1].s = "MsLN"
    mechname[2].s = "MsPN"
    mechname[3].s = "Fukuda"
    mechname[4].s = "HH"
    mechname[5].s = "Pas"
    
    typename[0].s = "default"
    typename[1].s = "PN"
    typename[2].s = "LN"
    typename[3].s = "RN"
    typename[4].s = "nothing"
    typename[5].s = "nothing"

    mechanism_flg = 0
    type = 0
    gid = 0
    //Interval = 0
    Delay = 0
    
    imax =0
    
    IS_SUPERCOMPUTER = 1
    
    gabaa_list = new List()
    gabab_list = new List()

    synlist = new List()
    biophys()
    
    dose = 0
}

create soma
proc biophys(){
    soma{
	/*	
	nseg = 10
	diam = 10
	L = 10
	*/	
	//Ra = 100.0
  }
}
proc setRN_biophys(){
    soma{
	nseg = 10
	diam = 20
	L = 100
	//Ra = 100.0
  }
}

public setPN_biophys
proc setPN_biophys(){
    soma{
	nseg = 10
	diam = 4000
	L = 100
	Ra = 100.0
  }
}


proc setGID(){
    gid = $1
}
func getGID(){
    return gid
}
proc setType(){
    type = $1
}

public gsyn,esyn
objref gsyn

objref esyn
obfunc setExp2Syn(){local rev,pos
    rev = $1
    pos = 0.7
    if(numarg()==2){
	pos = $2
    }
    soma esyn = new Exp2Syn(pos) synlist.append(esyn)
    esyn.e = rev
    esyn.tau1 = 1
    esyn.tau2 = 2
    //esyn.tau1 = 1
    //esyn.tau2 = 0.5
    return esyn
}
obfunc setExpSyn(){local rev
    rev = $1
    soma esyn = new ExpSyn(0.7) synlist.append(esyn)
    esyn.e = rev
    esyn.tau = 0.1
    return esyn
}

proc insertLNlla(){
    mechanism_flg = 1
    soma{
	insert hh
	gnabar_hh = 0.190
	gkbar_hh = 0.060
	gl_hh = 0.0001
	el_hh = -67
	ena = 50
	ek = -100

	insert IAHP2
	eahp_IAHP2 = -140

	insert cad
	ctau_cad = 0.0000125

	insert ICA
	eca = 120
    }
}
proc insertHH_RN(){
    soma{
	insert hh
	gkbar_hh = 0.001
	gnabar_hh = 0.0001 
    }
}

/*
proc insertIAHP(){
    mechanism_flg = 1
    soma{
	insert IAHP
	eahp_IAHP = -140
	ctau_IAHP = 0.0000125
    }
}
*/

proc insertType2LN(){
    soma{
	insert k_channel
	insert IAHP2
	insert ICA
	insert cad
    }
}

proc insertIAHP2(){
    mechanism_flg = 1
    soma{
	insert IAHP2
	eahp_IAHP2 = -140
    }
}

proc insertCAD(){
    mechanism_flg = 1
    soma{
	insert cad
	ctau_cad = 0.0000125
    }
}

proc insertICA(){
    mechanism_flg = 1
    soma{
	insert ICA
	eca = 120
    }
}

proc insertLNllb(){
    mechanism_flg = 1
    forall{
	insert MsLN
	ena_MsLN = 50
	ek_MsLN = -100
	el_MsLN = -67
	insert IAHP
	eahp_IAHP = -140
	ctau_IAHP = 0.000125
	insert ICA
	eca = 120
    }
}


proc insertLNllb2(){
    mechanism_flg = 1
    forall{

	insert MsLN
	ena = 50
	ek  = -100
	el_MsLN = -67
	insert IAHP2
	eahp_IAHP2 = -140
	insert cad
	//cainf_cad = 1.4
	ctau_cad = 0.000125
	insert ICA
	eca = 120

    }
}
/*
proc insertPN(){
    mechanism_flg = 2
    forall{
	insert MsPN
	ena_MsPN = 55
	ek_MsPN = -70
	eca_MsPN = 124
	el_MsPN = -50
    }
}
*/
proc insertFukuda(){
    mechanism_flg = 3
    forall{
	insert GPeA
	ena_GPeA = 55
	ek_GPeA = -70
	eca_GPeA = 124
	el_GPeA = -50
    }
}
proc insertFukuda_tunned(){
    mechanism_flg = 3
    forall{
	insert GPeA
	ena_GPeA = 55
	ek_GPeA = -70
	eca_GPeA = 124
	el_GPeA = -50
	//a_m_GPeA = 0.065
	a_m_GPeA = 0.048
	//a_W_GPeA = 0.055
	a_W_GPeA = 0.060
    }
}

proc insertHH(){
    mechanism_flg = 4
    forall{
	insert hh
    }
}

proc insertPas(){
    mechanism_flg = 5
    forall{
	insert pas
    }
}

proc insertHH_RN(){
    forall{
	insert hh
	gkbar_hh = 0.001
	gnabar_hh = 0.0001 
    }
}


obfunc connect2target(){local numSynapses localobj nc,target
    target = $o1
    //numSynapses = $2
    soma nc = new NetCon(&v(0.5),$o1)
    nc.delay = 2
    nc.threshold = 0
    nc.weight = 10
    //print "nc.weight ",nc.weight
    return nc
}

objref ic
public ic
obfunc setIclamp(){
    soma ic = new IClamp(0.4)
    if(numarg() ==3){
	printf("setIclamp numarg()==3\n")
	ic.del = $1
	ic.dur = $2
	ic.amp = $3
    }else{
	printf("setIclamp numarg()!=3\n")
	ic.del = 1
	ic.dur = 10
	ic.amp = 5
    }
    return ic
}

objref stim_vec, tvec, stim_flg, spiketiming
public stim_vec, tvec, stim_flg, spiketiming
proc setIClamp2(){local stoptime, timestep, i, j, num_spike, flg, stim_on,start_time, length, amp, L_RATIO,A_RATIO  localobj rand, datafile
    stoptime = $1
    timestep = $2
    strdef filename
    filename = $s3

    span = stoptime/timestep
    
    //print "stoptime ",stoptime, " timestep ",timestep, " span ",span

    soma ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5
    tvec = new Vector(span)
    for i=0,span -1 {
	tvec.x[i] = timestep * i
    }
    stim_flg = new Vector(span,0)
    spiketiming = new Vector()
    datafile = new File()
    stim_vec = new Vector(span,0)
    //sprint(filename,"spiketiming0.dat")
    datafile.ropen(filename)
  
    while(!datafile.eof()){
	var = datafile.scanvar()
	//print "datafile " ,var
	spiketiming.append(var-6.0)
    }
    spiketiming.remove(spiketiming.size()-1)
    num_spike = spiketiming.size()
        
    //print filename
    //spiketiming.printf("%5.8f\n")
    datafile.close()
    j=0
    for i=0, span -1{
	if(j<(num_spike-1)){
	    //print tvec.x[i]
	    if(((spiketiming.x[j]*1000) <= tvec.x[i])&&((spiketiming.x[j+1]*1000) > tvec.x[i])){
		stim_flg.set(i,1)
		j +=1
	    }
	}
    }
    flg = 0
    stim_on = 0
    for i=0, span-1{
	if(stim_flg.x[i]==1){
	    stim_on = 1
	}
	if(stim_on == 1){
	    if(flg == 0){
		start_time =tvec.x[i]
		flg = 1
	    }
	    if(tvec.get(i) == start_time){
		stim_vec.set(i,0)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=0){
		stim_vec.set(i,-amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=length){
		stim_vec.set(i,amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=L_RATIO*length){
		stim_vec.set(i,-amp*A_RATIO)
		//print stim_vec.get(i)
	    }else{
		stim_vec.set(i,0)
		stim_on = 0
		flg = 0
	    }
	}
    }
    stim_vec.play(&ic.amp, tvec, 1)
    //print "stim_vec"
    //stim_vec.printf()
}

func Latency(){local latency_, L0_, Lm_, lambda_, c
    c      = $1
    L0_     = $2
    lambda_ = $3
    Lm_     = $4

    latency_ = L0_ - lambda_ * c
    if(latency_<0){
	return 0
    }

    if(latency_>Lm_){
	return latency_
    }else{
	return Lm_
    }
}

proc setIClamp_with_Latency(){local stoptime, timestep, i, j, num_spike, flg, stim_on,start_time, length, amp, L_RATIO,A_RATIO, seed, L0, Lm, lambda, C, latency  localobj rand, datafile, rnd

    // ***Usage***
    // setIclamp_with_Latency(stoptime, timestep, filename, seed, concentration)
    //

    stoptime = $1
    timestep = $2
    strdef filename
    filename = $s3
    
    
    span = stoptime/timestep
    
    //print "stoptime ",stoptime, " timestep ",timestep, " span ",span
    
    //##################################################
    // FOR LATENCY
    seed   = $4
    rand   = new Random(seed)
    
    L0     = rand.normal(158,62)
    lambda = rand.lognormal(2.9,0.85)
    lambda = exp(lambda)
    Lm     = rand.normal(67,30)
    C      = $5

    latency = Latency(C,L0,lambda,Lm)
    latency = latency/1000.0
    //printf("Latency %f",latency) 
    //##################################################
    
    soma ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5
    tvec = new Vector(span)
    for i=0,span -1 {
	tvec.x[i] = timestep * i
    }
    stim_flg = new Vector(span,0)
    spiketiming = new Vector()
    datafile = new File()
    stim_vec = new Vector(span,0)
    //sprint(filename,"spiketiming0.dat")
    datafile.ropen(filename)
  
    while(!datafile.eof()){
	var = datafile.scanvar()
	//print "datafile " ,var
	spiketiming.append(var-6.0+latency)// FOR LATENCY
    }
    spiketiming.remove(spiketiming.size()-1)
    num_spike = spiketiming.size()
        
    //print filename
    //spiketiming.printf("%5.8f\n")
    datafile.close()
    j=0
    for i=0, span -1{
	if(j<(num_spike-1)){
	    //print tvec.x[i]
	    if(((spiketiming.x[j]*1000) <= tvec.x[i])&&((spiketiming.x[j+1]*1000) > tvec.x[i])){
		stim_flg.set(i,1)
		j +=1
	    }
	}
    }
    flg = 0
    stim_on = 0
    for i=0, span-1{
	if(stim_flg.x[i]==1){
	    stim_on = 1
	}
	if(stim_on == 1){
	    if(flg == 0){
		start_time =tvec.x[i]
		flg = 1
	    }
	    if(tvec.get(i) == start_time){
		stim_vec.set(i,0)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=0){
		stim_vec.set(i,-amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=length){
		stim_vec.set(i,amp)
		//print stim_vec.get(i)
	    }else if((tvec.get(i)-start_time)<=L_RATIO*length){
		stim_vec.set(i,-amp*A_RATIO)
		//print stim_vec.get(i)
	    }else{
		stim_vec.set(i,0)
		stim_on = 0
		flg = 0
	    }
	}
    }
    stim_vec.play(&ic.amp, tvec, 1)
    //print "stim_vec"
    //stim_vec.printf()
}

objref st
proc setStim(){local delay, imax
    delay = $1
    imax = $2
    soma st = new Stim(0.1)
    st.del = delay
    st.Imax = imax
}

objref nACh
obfunc mkNET_nACh(){local gmax
    gmax  = 0.3
    Erev  = 0.0
    Cmax  = 0.5
    Cdur  = 0.3 
    Alpha = 10
    Beta  = 0.2
    soma nACh = new NET_GABAa(0.3)
    nACh.gmax = gmax
    nACh.Erev = Erev
    nACh.Cmax = Cmax
    nACh.Cdur = Cdur
    nACh.Alpha = Alpha
    nACh.Beta = Beta
    return nACh
}

objref gaba
// This GABA_A synapse uses NetCon to connect
obfunc mkNET_GABAa(){local gmax
    gmax = $1
    soma gaba = new NET_GABAa(0.3)
    gaba.gmax = gmax
    gabaa_list.append(gaba)
    return gaba
}

obfunc mkNET_GABAb(){local gmax
    gmax = $1
    soma gaba = new NET_GABAb(0.5)
    gaba.gmax = gmax
    gabab_list.append(gaba)
    return gaba
}

public st1
objref st1
obfunc setIntermitStim(){local delay, imax, interval
    delay = $1
    imax = $2
    interval = $3
    soma st1 = new intermitStim(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    //st1.Imax2 = imax
    st1.nStim = -1
    return st1
}

obfunc setIntermitStim1(){local delay, imax, interval, imax2, nstim
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    soma st1 = new intermitStim(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    //st1.seed = 0
    return st1
}
/*
public setIntermitStim_withNoise
obfunc setIntermitStim_withNoise(){local delay, imax, interval, imax2, nstim
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    soma st1 = new intermitStimNoise(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    return st1
}
*/

public setIntermitStim_gaus
obfunc setIntermitStim_gaus(){local delay, imax, interval, imax2, nstim,sigma_o
    delay = $1
    imax = $2
    interval = $3
    imax2 = $4
    nstim = $5
    sigma_o = $6
    soma st1 = new intermitStimGaus(0.1)
    st1.del = delay
    st1.Imax = imax
    st1.interval = interval
    st1.tau_fall = 400 
    
    st1.Imax2 = imax2
    st1.nStim = nstim
    
    st1.sigma_o = sigma_o
    return st1
}

objref tvec1, vec
public tvec1, vec
proc setVoltageRecord(){
    tvec1 = new Vector()
    vec = new Vector()
    
    tvec1.record(&t)
    vec.record(&soma.v(0.5))
}

objref tvec2, veci
public setCurrentRecord
proc setCurrentRecord(){
    tvec2 = new Vector()
    veci = new Vector()
    
    tvec2.record(&t)
    veci.record(&st.i)
}

objref tvec3, gabaa_r_list, gabab_r_list
public setGABACurrentRecord
proc setGABACurrentRecord(){local i localobj vecg
    tvec3 = new Vector()
    gabaa_r_list = new List()
    gabab_r_list = new List()
    tvec3.record(&t)
    //printf("setCurrentRecord_GABA()\n")
    for i=0, gabaa_list.count()-1{
	vecg = new Vector()
	vecg.record(&gabaa_list.o(i).i)
	gabaa_r_list.append(vecg)
    }
    for i=0, gabab_list.count()-1{
	vecg = new Vector()
	vecg.record(&gabab_list.o(i).i)
	gabab_r_list.append(vecg)
    }
}

objref tvec4, veci2
public setCurrentRecord1
proc setCurrentRecord1(){
    tvec4 = new Vector()
    veci2 = new Vector()
    
    tvec4.record(&t)
    veci2.record(&st1.i)
}

objref rtvec, vec_nACh
public setCurrentRecord_nACh
proc setCurrentRecord_nACh(){
    rtvec = new Vector()
    vec_nACh = new Vector()
    rtvec.record(&t)
    vec_nACh.record(&nACh.i)
}

objref rtvec, vec_exp2syn
public setCurrentRecord_exp2syn
proc setCurrentRecord_exp2syn(){
    rtvec = new Vector()
    vec_exp2syn = new Vector()
    rtvec.record(&t)
    vec_exp2syn.record(&esyn.i)
}


objref mt_g1, file_g1, mt_g2, file_g2
public printGABACurrentRecord
proc printGABACurrentRecord(){local i,j
    i = $1
    strdef filepath
    filepath =$s2
    mt_g1 = new Matrix()
    file_g1 = new File()

    mt_g2 = new Matrix()
    file_g2= new File()
    //printf("printCurrentRecord_GABA():%d\n",i)
    //tvec.printf()
    mt_g1.resize(tvec3.size(),gabaa_r_list.count()+1)
    mt_g1.setcol(0,tvec3)
    for j=0, gabaa_r_list.count()-1{	
	printf("gabaa_r_list %d\n",j)
	mt_g1.setcol(1+j,gabaa_r_list.o(j))
    }

    mt_g2.resize(tvec3.size(),gabab_r_list.count()+1)
    mt_g2.setcol(0,tvec3)
    for j=0, gabab_r_list.count()-1{
	printf("gabab_r_list %d\n",j)	
	mt_g2.setcol(1+j,gabab_r_list.o(j))
    }
    //mt.printf("%5.5f\t")
    strdef filename
    //print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sGabaaCurrent_%s%d.txt",filepath,typename[type].s ,i) 
    //print filename
    file_g1.wopen(filename)
    mt_g1.fprint(file_g1,"%5.5f\t")
    file_g1.close()

    sprint(filename,"%sGababCurrent_%s%d.txt",filepath, typename[type].s ,i) 
    //print filename
    file_g2.wopen(filename)
    mt_g2.fprint(file_g2,"%5.5f\t")
    file_g2.close()
}

/*
objref mt2,file2
public mt2, printCurrentRecord
proc printCurrentRecord(){local i
    i = $1
    mt2 = new Matrix()
    file2 = new File()
    
    //tvec.printf()
    mt2.resize(tvec2.size(),gaba_r_list.count)
    mt2.setcol(0,tvec2)
    mt2.setcol(1,veci)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"./record/stimcurrent_%s%d.txt",mechname[mechanism_flg].s ,i) 
    file2.wopen(filename)
    mt2.fprint(file2,"%5.5f\t")
    file2.close()
}
*/
objref mt3,file3
public mt3, printCurrentRecord1
proc printCurrentRecord1(){local i
    i = $1
    mt3 = new Matrix()
    file3 = new File()
    
    //tvec.printf()
    mt3.resize(tvec4.size(),2)
    mt3.setcol(0,tvec4)
    mt3.setcol(1,veci2)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"./record/stimcurrent_%s%d.txt",mechname[mechanism_flg].s ,i) 
    file3.wopen(filename)
    mt3.fprint(file3,"%5.5f\t")
    file3.close()
}

objref mt4,file4
public mt4, printCurrentRecord_nACh
proc printCurrentRecord_nACh(){local i
    i = $1
    strdef filepath
    filepath= $s2
    mt4 = new Matrix()
    file4 = new File()
    
    //tvec.printf()
    mt4.resize(rtvec.size(),2)
    mt4.setcol(0,rtvec)
    mt4.setcol(1,vec_nACh)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sSynapticCurrent_nACh%d.txt",filepath,i) 
    file4.wopen(filename)
    mt4.fprint(file4,"%5.5f\t")
    file4.close()
}

objref mt5,file5
public mt5, printCurrentRecord_exp2syn
proc printCurrentRecord_exp2syn(){local i
    i = $1
    strdef filepath
    filepath= $s2
    mt5 = new Matrix()
    file5 = new File()
    
    //tvec.printf()
    mt5.resize(rtvec.size(),2)
    mt5.setcol(0,rtvec)
    mt5.setcol(1,vec_exp2syn)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sSynapticCurrent_exp2syn%d.txt",filepath,i) 
    file5.wopen(filename)
    mt5.fprint(file5,"%5.5f\t")
    file5.close()
}

objref mt,file
public mt
public printVoltageRecord
proc printVoltageRecord(){local i
    strdef filepath
    i = $2
    pcid = $1
    filepath = $s3
    mt = new Matrix()
    file = new File()
    
    //tvec.printf()
    mt.resize(tvec1.size(),2)
    mt.setcol(0,tvec1)
    mt.setcol(1,vec)
    
    //mt.printf("%5.5f\t")
    strdef filename
    print "flg ",mechanism_flg, mechname[mechanism_flg].s
    sprint(filename,"%sVoltage_%s%d.txt",filepath,typename[type].s,i) 
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}

objref ncSR// netcon for Spike Record
//objrf tvecSR, idvecSR //tvecSR time vector for Spike Record
objref tvecSR
proc setSpikeRecord(){localobj nil
    tvecSR = new Vector()
    //idvecSR = new Vector()
    ncSR = connect2target(nil)
    //ncSR.record(tvecSR,idvecSR.srcgid)
    ncSR.record(tvecSR)
}

objref fileSR
public printSpikeRecord
proc printSpikeRecord(){local i, interval,tstop, istim1, istim2
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s%d.dat",filepath,typename[type].s,n)
    
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

public printSpikeRecord_DoseResponse
proc printSpikeRecord_DoseResponse(){local i, interval,tstop, istim1, istim2
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s_Dose%d_%d.dat",filepath,typename[type].s,dose,n)
   
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

public printSpikeRecord_NetStim
proc printSpikeRecord_NetStim(){local i, interval,tstop, istim1, istim2
    if(numarg() == 7){
	pcid = $1
	n = $2
	interval = $3
	tstop = $4
	istim1 = $5
	istim2 = $6
	filepath = $s7
    }else if(numarg() == 4){
	pcid = $1
	n = $2
	interval = 1200
	tstop = $3
	istim1 = 0
	istim2 = 0
	filepath = $s4
    }
    istim1 = imax
    fileSR = new File()
    strdef filename,filepath
 
    sprint(filename,"%sSpikerecord_%s_FREQ%d_%d.dat",filepath,typename[type].s,dose,n)
   
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",Delay)
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ PN stimulation current max : %d\n",istim1)
    fileSR.printf("$ LN stimulation current max : %d\n",istim2)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

endtemplate Stick