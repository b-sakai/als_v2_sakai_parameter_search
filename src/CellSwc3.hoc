//------------------------------------
// MODIFIED HISTORY
// 2017.01.05 by nebula
// 2015.01.08
// 2015.04.30
// 2015.05.20
//------------------------------------


//This code is for al_V2
//CellSwc Version 3.0

{load_file("stdlib.hoc")}


/*
Use ExpSid to make synapse
*/

begintemplate CellSwc
//------------------------------------------------------
// Original Variables and Functions
public init, shape, translation, subsets, geom, biophys, geom_nseg, biophys_inhomo, makeSyn, makeNetCon
public Scalex, ScaleY, ScaleZ, Shrinkagex, Shrinkagey, Shrinkagez
public saveData
public all, secInput, secOutput
public SynList
public Dend, SectionNum

//-------------------------------------------------------
// Public Functions
public connect2target
public mkSyn,mkExp2Syn
public mkSynapses, synapses
public mkPRL_GABA, mkDUMMY, mkNET_GABAa, mkNET_GABAb, mkNET_STDP, mkNET_GABA_STDP
public setPath, setNid, setGid, setSpikegenlist, setAxonlist
public setIntermitStim_gaus,setIClamp, mkIclamp, setIClamp_with_Latency
public insertHH, insertHH_RN, insertLNlla, insertFukuda_tunned, initModel_PN
public getAxon
public setSpikeRecord, setMultiSpikeRecord, fprintSpikeRecord, RNfprintSpikeRecord, fprintMultiSpikeRecord
public setNSEG

//-------------------------------------------------------
// Public Variables
public ID, Type, pID //pID -> parent ID
public gid, nid, cellid, swcid, cloneid, gloid, ppath, synpath
public synlist_
public synlist, synlist_fromMRN, synapse, synlist_general_odor
public SynNumberList, numSynapse
public SynPathList //Synapse information file path list
public fromRNsyn, fromMRNsyn, general_odor_syn
public axonlist, cellbodylist, noaxonlist, spikegenlist
public Delay

// will be re-created in shape()
create Dend[1]

//------------------------------------------------------------------------------
// swc header informations
//------------------------------------------------------------------------------
strdef HeaderOriginalSource
strdef HeaderCreature
strdef HeaderRegion
strdef HeaderFieldLayer
strdef HeaderType
strdef HeaderContributor
strdef HeaderReference
strdef HeaderRaw
strdef HeaderExtras
strdef HeaderSomaArea
strdef HeaderShrinkageCorrection
strdef HeaderVersionNumber
strdef HeaderVersionDate
strdef HeaderScale
ScaleX = ScaleY = ScaleZ = 1
Shrinkagex = Shrinkagey = Shrinkagez = 1
SectionNum = 1

//------------------------------------------------------------------------------
// Section lists
//------------------------------------------------------------------------------
objref all, secInput, secOutput
objref axonlist, cellbodylist, dendlist, noaxonlist, spikegenlist

//------------------------------------------------------------------------------
// List
//------------------------------------------------------------------------------
objref SynPathList
objref SynNumberList

//------------------------------------------------------------------------------
// synaptic points
//------------------------------------------------------------------------------
objref SynList
objref SynNo

objref synlist
objref synlist_fromMRN
objref synlist_general_odor

objref synlist_
//------------------------------------------------------------------------------
// geometry
//------------------------------------------------------------------------------
tranlationX = translationY = translationZ = 0

//------------------------------------------------------------------------------
// procedures / functions interface
//------------------------------------------------------------------------------
// proc init()
// proc shape()
// proc translation()
// proc subsets()
// proc geom()
// proc biophys()
// proc geom_nseg()
// proc biophys_inhomo()
// obfunc makeSyn()
// obfunc makeNetCon

//
objref this
proc init() {
    strdef swc_filename
    swc_filename = $s1
    strdef fromRNsyn
    strdef fromMRNsyn
    strdef general_odor_syn
    gid     = $2
    cellid  = $3
    swcid   = $4
    cloneid = $5
    gloid   = $6

    Delay = 0

    SynList = new List()
    synlist = new List()
    synlist_fromMRN = new List()
    synlist_general_odor = new List()
    SynNo = new Vector()

    SynNumberList = new Vector()



    synlist_ = new List()
    SynPathList = new List()

    all = new SectionList()
    secInput = new SectionList()
    secOutput = new SectionList()

    axonlist = new SectionList()

    shape(swc_filename)
    subsets()
    geom()
    biophys()
    geom_nseg()
}

objref ID, Type, pID //pID -> parent ID
proc shape() { localobj strFunc, fobj strdef str, strName, strValue, strTemp
    fobj = new File()
    {fobj.ropen($s1)}
    strFunc = new StringFunctions()

    //--------------------------------------------------------------------------
    // load header information
    //--------------------------------------------------------------------------
    curLine = 0
    dataLineOverHead = 0
    while (!fobj.eof()) {
        fobj.gets(str)
        strFunc.head(str, " ", strName)
        strFunc.tail(strName, "#", strName)
        strFunc.tail(str, " ", strValue)
        strFunc.head(strValue, "\n", strValue)

        strFunc.head(str, "[^#]", strTemp)
        if (0 != strcmp("#", strTemp)) {
            dataLineOverHead = curLine
            break
        }

        if (!strcmp(strName, "ORIGINAL_SOURCE")) {
            HeaderOriginalSource = strValue
        }
        if (!strcmp(strName, "CREATURE")) {
            HeaderCreature = strValue
        }
        if (!strcmp(strName, "REGION")) {
            HeaderRegion = strValue
        }
        if (!strcmp(strName, "FIELD/LAYER")) {
            HeaderFieldLayer = strValue
        }
        if (!strcmp(strName, "TYPE")) {
            HeaderType = strValue
        }
        if (!strcmp(strName, "CONTRIBUTOR")) {
            HeaderContributor = strValue
        }
        if (!strcmp(strName, "REFERENCE")) {
            HeaderReference = strValue
        }
        if (!strcmp(strName, "RAW")) {
            HeaderRaw = strValue
        }
        if (!strcmp(strName, "EXTRAS")) {
            HeaderExtras = strValue
        }
        if (!strcmp(strName, "SOMA_AREA")) {
            HeaderSomaArea = strValue
        }
        if (!strcmp(strName, "SHRINKAGE_CORRECTION")) {
            HeaderShrinkageCorrection = strValue
            sscanf(HeaderShrinkageCorrection, "%f %f %f", &ShrinkageX, &ShrinkageY, &ShrinkageZ)
        }
        if (!strcmp(strName, "VERSION_NUMBER")) {
            HeaderVersionNumber = strValue
        }
        if (!strcmp(strName, "VERSION_DATE")) {
            HeaderVersionDate = strValue
        }
        if (!strcmp(strName, "SCALE")) {
            HeaderScale = strValue
            sscanf(HeaderScale, "%f %f %f", &ScaleX, &ScaleY, &ScaleZ)
            //printf("Scale (%f, %f, %f)\n", ScaleX, ScaleY, ScaleZ)
        }

        curLine += 1
    }

    SectionNum = 0
    while (!fobj.eof()) {
        SectionNum = fobj.scanvar()-1
        for i = 2, 7 {
            fobj.scanvar()
        }
    }

    {fobj.close()}

    {fobj.ropen($s1)}

    curLine = 0
    while (curLine < dataLineOverHead) {
        fobj.gets(strTemp)
        curLine += 1
    }

    //--------------------------------------------------------------------------------
    // create multi-compartment model
    //---------------------------------------------------------------------------------
    create Dend[SectionNum]
    ID = new Vector(SectionNum)
    Type = new Vector(SectionNum)
    pID = new Vector(SectionNum)

    // root node
    rootNo = fobj.scanvar() - 2
    type_root = fobj.scanvar()
    x_root = fobj.scanvar()
    y_root = fobj.scanvar()
    z_root = fobj.scanvar()
    d_root = fobj.scanvar()
    parentNo_root = fobj.scanvar() - 2

    while (1) { // while current node's connected to the root node
        curNo = fobj.scanvar() - 2
        type = fobj.scanvar()
        x = fobj.scanvar()
        y = fobj.scanvar()
        z = fobj.scanvar()
        d = fobj.scanvar()
        parentNo = fobj.scanvar() - 2
        ID.x[curNo]=curNo
        Type.x[curNo]=type
        pID.x[curNo]=parentNo
        if (parentNo != rootNo){break}
        Dend[curNo] {
        pt3dclear()
        pt3dadd(x_root * ScaleX, y_root * ScaleY, z_root * ScaleZ, d_root)
        pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)
        }
    }

    Dend[parentNo] {
        parentX = x3d(1)
        parentY = y3d(1)
        parentZ = z3d(1)
        parentDiam = diam3d(1)
    }
    Dend[curNo] {
        pt3dclear()
        pt3dadd(parentX, parentY, parentZ, parentDiam)
        pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)
    }
    connect Dend[curNo](0), Dend[parentNo](1)

    while (!fobj.eof()) {
        curNo = fobj.scanvar() - 2
        type =  fobj.scanvar()
        x = fobj.scanvar()
        y = fobj.scanvar()
        z = fobj.scanvar()
        d = fobj.scanvar()
        parentNo = fobj.scanvar() - 2
        ID.x[curNo]=curNo
        Type.x[curNo]=type
        pID.x[curNo]=parentNo

        Dend[parentNo] {
        parentX = x3d(1)
        parentY = y3d(1)
        parentZ = z3d(1)
        parentDiam = diam3d(1)
        }
        Dend[curNo] {
        pt3dclear()
        pt3dadd(parentX, parentY, parentZ, parentDiam)
        pt3dadd(x * ScaleX, y * ScaleY, z * ScaleZ, d)
        }
        connect Dend[curNo](0), Dend[parentNo](1)
    }

    {fobj.close()}

    //print "load : ", $s1, " ok"
} // shape()

proc translation() {
    translationX = $1
    translationY = $2
    translationZ = $3
    forall {
        x0 = x3d(0)
        y0 = y3d(0)
        z0 = z3d(0)
        diam0 = diam3d(0)
        x1 = x3d(1)
        y1 = y3d(1)
        z1 = z3d(1)
        diam1 = diam3d(1)
        pt3dclear()
        pt3dadd(translationX + x0, translationY + y0, translationZ + z0, diam0)
        pt3dadd(translationX + x1, translationY + y1, translationZ + z1, diam1)
    }
}

proc subsets() {
    Dend[0] all.wholetree()
}

proc getAxon(){local i, type_axon
    type_axon = 3
    for i=0, SectionNum-1{
    if(Type.x[i] == type_axon){
        Dend[i] axonlist.append()
    }
    }
}

obfunc sl2list() {localobj tmplist
    // arguments
    // $o1: SectionList
    tmplist = new List()
    forsec $o1 tmplist.append(new SectionRef())
    return tmplist
}

func countSL() {local i
    // arguments
    // $o1: SectionList
    i=0
    forsec $o1 {
    i+=1
    }
    return i
}

proc setSpikegenlist(){local j, axonnum localobj tmplist
    SPIKEGEN_POS  = $1
    SPIKEGEN_SIZE = $2
    
    noaxonlist	 = new SectionList()
    spikegenlist = new SectionList()

    this.Dend[0] noaxonlist.wholetree()
    noaxonlist.remove(axonlist)

    axonnum = countSL(axonlist)
    tmplist = sl2list(axonlist)
    SPIKEGEN_POS = int(SPIKEGEN_POS)
    SPIKEGEN_SIZE = int(SPIKEGEN_SIZE)
    j = SPIKEGEN_POS
    while(j < axonnum && j < SPIKEGEN_POS+SPIKEGEN_SIZE) {
    tmplist.o(j).sec spikegenlist.append()
    j+=1
    }
}


proc setAxonlist(){local j
    AXON_POS  = $1
    AXON_SIZE = $2

    axonlist = new SectionList()

    AXON_POS = int(AXON_POS)
    AXON_SIZE = int(AXON_SIZE)
    j = AXON_POS
    while(j < AXON_POS+AXON_SIZE) {
    	    axonlist.append()
    j+=1
    }     
}

strdef ppath, synpath
proc setPath(){
    ppath   = $s1
    synpath = $s2
}
proc setNid(){
    /*
    if(cellid == 1){
    nid = cellid * 100000 + swcid
    }else{
    nid = cellid * 100000 + swcid*1000 + cloneid
    }
    */
    nid = cellid * 100000 + swcid*1000 + cloneid
}

proc setGid(){
    gid = cellid * 100000 + swcid*1000 + cloneid
}

proc geom() {
}

proc biophys() {
    // forall {
    //  Ra = 100
    //  cm = 1
    // }
}

external lambda_f
proc geom_nseg() {
    forall { nseg = int((L / (0.1 * lambda_f(100)) + .9) / 2) * 2 + 1 }
}

proc biophys_inhomo() {}

proc insertHH(){
    forall{
    insert hh
    }
}

proc setNSEG(){
    forall{
    nseg = $1
    }
}

proc insertHH_RN(){
    forall{
    insert hh
    gkbar_hh = 0.001
    gnabar_hh = 0.0001
    }
}

proc insertLNlla(){local r
    r = $1
    forall{
    insert hh
    gnabar_hh = 0.190 * r
    gkbar_hh = 0.060 * r
    gl_hh = 0.0001 * r
    el_hh = -67
    ena = 50
    ek = -100

    insert IAHP2
    eahp_IAHP2 = -140

    insert cad
    ctau_cad = 0.0000125

    insert ICA
    eca = 120

    }
}
proc insertFukuda_tunned(){//local r
    mechanism_flg = 3
//    r = $1
    forall{
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
        eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060

        gnabar   = 120e-3// * r
        gkdrbar  = 5e-3// * r
        gl  = 0.3e-3// * r
        gcatbar   = 0.1e-3// * r
        gkcabar   = 2e-3// * r
        gA =  220e-3// * r
    }
}

proc initModel_PN() { local r, rr localobj pn
    r  = 200
    rr  = 10
    pn = $o1

    pn forall {
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
        eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060

        gnabar   = 120e-3 / rr
        gkdrbar  = 5e-3 / rr
        gl  = 0.3e-3 / rr
        gcatbar   = 0.1e-3 / rr
        gkcabar   = 2e-3 / rr
        gA =  220e-3
    }
	
    forsec pn.spikegenlist {
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
        eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060


        gnabar = 120e-3 * r
	gkdrbar = 120e-3 * r
        gl  = 0.3e-3
        gcatbar   = 0.1e-3
        gkcabar   = 2e-3
        gA =  220e-3

    }
}

objref syn_
obfunc makeSyn() { local targetno localobj r
    // args : targetSectionNo, tau1, tau2, e
    for i = 0, SynNo.size-1 {
        if ($1 == SynNo.x[i]) return SynList.object(i)
    }
    if ($1 == -1) {
        r = new Random()
        r.uniform(0, SectionNum-1)
        targetno = int(r.repick())
    } else {
        targetno = $1
    }
    SynNo.append(targetno)
    this.Dend[targetno] syn_ = new Exp2Syn(0.5) SynList.append(syn_)
    syn_.tau1 = $2
    syn_.tau2 = $3
    syn_.e = $4
    return syn_
}
numSynapse = 0
strdef SynF //Synapse List File name
proc ReadSynlist(){local i localobj f
    f = new File()
    SynNumberList = new Vector()
    SynF = $s1
    f.ropen(SynF)
    numSynapse = f.scanvar()
    for i=0, numSynapse-1{
    SynNumberList.append(f.scanvar())
    }
    //print numSynapse
    //print SynNumberList
}
strdef str1

//make synapses to connect RN and other cells
proc mkSynapses(){local i
    //$s1 = Synapse list data file name
    str1 = $s1
    type = $2 // type = 0: synapse from ORN, type = 1: synapse from MRN, type = 2: synapse from general odor receptor
    learning = $3
    stdp_mul = $4
    stdp_pn_d = $5
    ReadSynlist(str1)

    for i=0, SynNumberList.size()-1{

    if(type == 0){
        synapses(SynNumberList.x[i], learning, stdp_mul, stdp_pn_d)
    } else if (type == 1){
        synapses_fromMRN(SynNumberList.x[i], learning, stdp_mul, stdp_pn_d)
    } else if (type == 2){
        synapses_general_odor(SynNumberList.x[i], learning, stdp_mul, stdp_pn_d)
    }

    }
}


objref syn__
proc synapses(){local targetno, tau, tau1, tau2, dtau, d, rev_e, learnig
    targetno = $1
    //print targetno
    tau  = 1
    dtau = 50
    rev_e = 0
    stdp_mul = $3
    stdp_pn_d = $4
    if(cellid == 2){
    	d = stdp_pn_d
    } else {
        d = 1
    }
    learning = $2

    this.Dend[targetno] syn__ = new ExpSynSTDP(0.2) synlist.append(syn__)
    syn__.tau = tau
    syn__.dtau = dtau
    syn__.d = d
    syn__.e = rev_e
    syn__.LR = stdp_mul
    syn__.maxWeight = 1.0
    syn__.minWeight = 0.0025
    syn__.learning = learning
    this.Dend[targetno] syn__ = new ExpSynSTDP(0.4) synlist.append(syn__)
    syn__.tau = tau
    syn__.dtau = dtau
    syn__.d = d
    syn__.e = rev_e
    syn__.LR = stdp_mul
    syn__.maxWeight = 1.0
    syn__.minWeight = 0.0025
    syn__.learning = learning
    this.Dend[targetno] syn__ = new ExpSynSTDP(0.6) synlist.append(syn__)
    syn__.tau = tau
    syn__.dtau = dtau
    syn__.d = d
    syn__.e = rev_e
    syn__.LR = stdp_mul
    syn__.maxWeight = 1.0
    syn__.minWeight = 0.0025
    syn__.learning = learning
    this.Dend[targetno] syn__ = new ExpSynSTDP(0.8) synlist.append(syn__)
    syn__.tau = tau
    syn__.dtau = dtau
    syn__.d = d
    syn__.e = rev_e
    syn__.LR = stdp_mul
    syn__.maxWeight = 1.0
    syn__.minWeight = 0.0025
    syn__.learning = learning
}


proc synapses_fromMRN(){local targetno, tau1, tau2, rev_e
    targetno = $1
    //print targetno
    tau1  = 1
    tau2  = 0.5
    rev_e = 0
    this.Dend[targetno] syn__ = new Exp2Syn(0.2) synlist_fromMRN.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.4) synlist_fromMRN.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.6) synlist_fromMRN.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.8) synlist_fromMRN.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
}

proc synapses_general_odor(){local targetno, tau1, tau2, rev_e
    targetno = $1
    //print targetno
    tau1  = 1
    tau2  = 0.5
    rev_e = 0
    this.Dend[targetno] syn__ = new Exp2Syn(0.2) synlist_general_odor.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.4) synlist_general_odor.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.6) synlist_general_odor.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
    this.Dend[targetno] syn__ = new Exp2Syn(0.8) synlist_general_odor.append(syn__)
    syn__.tau1 = tau1
    syn__.tau2 = tau2
    syn__.e = rev_e
}

public connectVecStim
obfunc connectVecStim(){local latency, id, i, seed, N, c localobj synapse, vecstim, nc
    vecstim = $o1
    synapse = $o2
    
    nc = new NetCon(vecstim, synapse)
    nc.threshold = 0
    nc.weight    = 1
    if(numarg()==3){
    latency = $3
    }else{
    latency = 0
    }
    nc.delay = Delay + latency
//    vs_ncs.append(nc)
    return nc
}

/*
proc synapse(){local targetno
    targetno = $1
    //    print "targetno ",targetno
    Dend[targetno] syn__ = new ExpSid(0.5) synlist.append(syn__)
    //    syn__.tau = 2
    //    syn__.e = -80
}
*/

objref Syn__
obfunc mkSyn(){local targetno
    targetno = $1

    this.Dend[targetno] Syn__ = new ExpSyn(0.5) synlist_.append(Syn__)
    Syn__.tau = 0.1
    Syn__.e   = $2
    return Syn__
}

obfunc mkExp2Syn(){local targetno
    targetno = $1

    this.Dend[targetno] Syn__ = new Exp2Syn(0.5) synlist_.append(Syn__)

    Syn__.tau1 = 1
    Syn__.tau2 = 2
    Syn__.e   = $2
    return Syn__
}

obfunc connect2target(){local pre_comp,point localobj nc,target
    if(numarg() == 2){
    pre_comp = $1
    target   = $o2
    this.Dend[pre_comp] nc = new NetCon(&v(0.5),target)
    }else if(numarg() == 3){
    pre_comp = $1
    target   = $o2
    point    = $3
    this.Dend[pre_comp] nc = new NetCon(&v(point),target)
    }
    nc.threshold = 1
    //print "nc.weight ",nc.weight
    //this.Dend[pre_comp]{psection()}
    return nc
}

objref gaba
// This GABA_A synapse uses pc.transfer
obfunc mkPRL_GABA(){local gmax,comp
    comp = $1
    gmax = $2
    this.Dend[comp] gaba = new PRL_GABA(0.5)
    gaba.gmax = gmax
    return gaba
}

objref stdp
// This STDP synapse uses NetCon to connect
obfunc mkNET_STDP(){local comp
    comp = $1
    learning = $2
    this.Dend[comp] stdp = new ExpSynSTDP(0.5)
    stdp.e = 0
    stdp.tau = 1.0
    stdp.dtau = 50.0
    stdp.maxWeight = 1.0
    stdp.learning = learning 
    return stdp
}

objref gaba_stdp
// This GABA_STDP synapse uses NetCon to connect
obfunc mkNET_GABA_STDP(){local comp
    comp = $1
    gmax = $2
    learning = $3
    this.Dend[comp] gaba_stdp = new NET_GABAa_STDP(0.5)
    stdp.tau = 1.0
    stdp.dtau = 50.0
    gaba_stdp.gmax = gmax
    gaba_stdp.Erev = 0
    gaba_stdp.maxWeight = 1.0
    gaba_stdp.learning = learning 
    return gaba_stdp
}

// This GABA_A synapse uses NetCon to connect
obfunc mkNET_GABAa(){local gmax, comp
    comp = $1
    gmax = $2
    this.Dend[comp] gaba = new NET_GABAa(0.5)
    gaba.gmax = gmax
    return gaba
}

obfunc mkNET_GABAb(){local gmax, comp
    comp = $1
    gmax = $2
    this.Dend[comp] gaba = new NET_GABAb(0.5)
    gaba.gmax = gmax
    return gaba
}

objref dummy
obfunc mkDUMMY(){
    comp = $1
    this.Dend[comp] dummy = new DUMMY(0.5)
    return dummy
}

public doNothing
proc doNothing(){
    print $s1
    print "do nothing"
}

objref iclamp
obfunc mkIclamp(){local id, num,targetno
    targetno = $1
    //print "setSinglePulse ", gid
    this.Dend[targetno] iclamp = new IClamp(0.5)
    if(numarg()!=4){
    iclamp.dur = 2
    iclamp.amp = 6
    iclamp.del = 0.5
    }else{
    iclamp.dur = $2
    iclamp.amp = $3
    iclamp.del = $4
    }
    //iclamp.del = 2*id*(num+1)
    //iclamp.del = 20*id*(num+1)
    //    psection()
    return iclamp
}


obfunc makeNetCon() { local targetno localobj nc, r
    // args : sourceSectionNo, targetSyn, threshold, delay, weight
    if ($1 == -1) {
        r = new Random()
        r.uniform(0, SectionNum)
        targetno = int(r.repick())
    } else {
        targetno = $1
    }
    // NetCon(source, target, threshold, delay, weight)
    Dend[targetno] nc = new NetCon(&v(0.5), $o2, $3, $4, $5)
    return nc
}

objref st
proc setIntermitStim_gaus(){local targetno, delay, imax, interval, imax2, nstim,sigma_o
    targetno = $1
    delay    = $2
    imax     = $3
    interval = $4
    imax2    = $5
    nstim    = $6
    sigma_o  = $7

    Dend[targetno] st = new intermitStimGaus(0.1)
    st.del = delay
    st.Imax = imax
    st.interval = interval
    st.tau_fall = 400

    st.Imax2 = imax2
    st.nStim = nstim

    st.sigma_o = sigma_o
    //return st
}

/*
num_spike : number of spikes
*/
objref ic
objref stim_vec, tvec, stim_flg, spiketiming1, spiketiming2
proc setIClamp(){local stoptime, timestep, i, j, numStim, num_spike1, num_spike2, flg, start_time, length, amp, L_RATIO,A_RATIO  localobj rand, datafile1, datafile2 //flg: flag
    strdef filename1
    strdef filename2

    stoptime = $1
    timestep = $2
    filename1 = $s3
    filename2 = $s4
    span = stoptime/timestep

    this.Dend[0] ic = new IClamp(1.0)
    ic.del = 0
    ic.dur = 1e9
    L_RATIO = 2.0
    A_RATIO = 0.3
    amp = 15
    length = 0.5

    tvec = new Vector(span)
    stim_flg = new Vector(span,0)
    spiketiming1 = new Vector()
    spiketiming2 = new Vector()
    datafile1 = new File()
    datafile2 = new File()
    stim_vec = new Vector(span,0)
    for i=0,span -1 {
        tvec.x[i] = timestep * i
    }

    datafile1.ropen(filename1)

    while(!datafile1.eof()){
        var = datafile1.scanvar() / 5.0
        spiketiming1.append(var)
    }
    spiketiming1.remove(spiketiming1.size()-1)
    num_spike1 = spiketiming1.size()
    datafile1.close()

    datafile2.ropen(filename2)
    while(!datafile2.eof()){
        var = datafile2.scanvar() / 5.0
        spiketiming2.append(var)
    }
    spiketiming2.remove(spiketiming2.size()-1)
    num_spike2 = spiketiming2.size()
    datafile2.close()

    numStim=1
    j=0
    for j = 0, num_spike1-1 { // refactored by Sakai 20190113
        i = int(spiketiming1.x[j]*1000/dt) - int(500/dt) /5.0 +  1
	if(i%5 != 0){continue}

	if(i <= 0){ continue }
        if(i >= 500/dt){ break }
        if(i >= span){ break }
        stim_flg.set(i,1)
	
	for numStim=1, int(stoptime/1000)-1{
	if(i+1000*numStim/dt  >= span){ continue }
        stim_flg.set(i+1000*numStim/dt,1)
	}
    }

    numStim=1
    j=0
    for j = 0, num_spike2-1 { // refactored by Sakai 20190113
        i = int(spiketiming2.x[j]*1000/dt) - int(500/dt) /5.0 + 1
	if(i%5 != 0){continue}

	if(i <= 0){ continue }
        if(i >= 500/dt){ break }
        if(i+500/dt >= span){ break }
        stim_flg.set(i+500/dt,1)

	for numStim=1, int(stoptime/1000)-1{
	if(i+1000*numStim/dt + 500/dt  >= span){ continue }
        stim_flg.set(i+1000*numStim/dt + 500/dt,1)
	}
    }


    flg = 0
    for i=0, span-1{
        if(stim_flg.x[i]==1){
            stim_on = 1
        }
        if(stim_on == 1){
            if(flg == 0){
                start_time = tvec.x[i]
                flg = 1
            }
            if(tvec.get(i) == start_time){
                stim_vec.set(i,0)
            }else if((tvec.get(i)-start_time)<=0){
                stim_vec.set(i,-amp)
            }else if((tvec.get(i)-start_time)<=length){
                stim_vec.set(i,amp)
            }else if((tvec.get(i)-start_time)<=L_RATIO*length){
                stim_vec.set(i,-amp*A_RATIO)
            }else{
                stim_vec.set(i,0)
                stim_on = 0
                flg = 0
            }
        }
    }
    stim_vec.play(&ic.amp, tvec, 1)
}

func Latency(){local latency_, L0_, Lm_, lambda_, c
    c      = $1
    L0_     = $2
    lambda_ = $3
    Lm_     = $4

    latency_ = L0_ - lambda_ * c
    if(latency_<0){
    return 0
    }

    if(latency_>Lm_){
    return latency_
    }else{
    return Lm_
    }
}

objref ncSR// netcon for Spike Record
objref tvecSR, tvecSR_var, idvecSR //tvecSR time vector for Spike Record
objref compartments


proc setSpikeRecord(){local cmpt localobj nil
    cmpt = $1
    tvecSR = new Vector()
    idvecSR = new Vector()
    ncSR = connect2target(cmpt,nil)
    //ncSR.record(tvecSR,idvecSR.srcgid)

    ncSR.record(tvecSR)
}

proc setMultiSpikeRecord(){local cmpt localobj nil
    compartments = new Vector(4)
    compartments.x(0) = $1
    compartments.x(1) = $2
    compartments.x(2) = $3
    compartments.x(3) = $4

    tvecSR = new List()

    for(j = 0; j<compartments.size();j+=1){
        tvecSR_var = new Vector()
        ncSR = connect2target(compartments.x(j),nil) //compartments.x(0), nil)
        ncSR.record(tvecSR_var)
        tvecSR.append(tvecSR_var)
    }
}

public setSpikeRecord_debug, fprintSpikeRecord_debug, setSpikeRecordList_debug

objref tvecL, cmptL, ncL
objref fileSR
proc fprintSpikeRecord(){local i, interval, tstop, delay
    strdef filename, fprint_dir
    fprint_dir = $s1
    interval = $2
    tstop = $3
    delay = 0.0
    fileSR = new File()
    sprint(filename,"%s%dSpike.dat",fprint_dir,gid)
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",delay)
    print "tvecSR  ",tvecSR.size()
    fileSR.printf("$ Number of data : %d\n",tvecSR.size())
    fileSR.printf("$ TSTOP : %d\n",tstop)
    tvecSR.printf(fileSR,"%5.5f\n")
    fileSR.close()
}

objref rtvecL, rcmptL, rncL
objref rfileSR
proc RNfprintSpikeRecord(){local i, interval, tstop, delay
    strdef filename, fprint_dir
    fprint_dir = $s1
    interval = $2
    tstop = $3
    delay = 0.0
    rfileSR = new File()
    sprint(filename,"%s%02dSpike.rndat",fprint_dir, gloid)
    rfileSR.wopen(filename)
    rfileSR.printf("$Stimulation Interval(ms): %d\n",interval)
    rfileSR.printf("$Delay(ms): %f\n",delay)
    print "tvecSR  ",tvecSR.size()
    rfileSR.printf("$Number of data : %d\n",tvecSR.size())
    rfileSR.printf("$TSTOP : %d\n",tstop)
    tvecSR.printf(rfileSR,"%5.5f\n")
    rfileSR.close()
}

func getNumLines(){local max
    max = 0
    for(j = 0; j<tvecSR.count();j+=1){
        if(tvecSR.o(j).size() > max){
            max = tvecSR.o(j).size()
        }
    }
    return max
}

proc fprintMultiSpikeRecord(){local i, interval, tstop, delay localobj mt
    strdef filename, fprint_dir
    fprint_dir = $s1
    interval = $2
    tstop = $3
    delay = 0.0
    mt = new Matrix()
    fileSR = new File()
    num_lines = getNumLines()

    mt.resize(num_lines, 4)
    for(j = 0; j<tvecSR.count();j+=1){
        mt.setcol(j, tvecSR.o(j))
    }

    sprint(filename,"%s%dSpike.dat",fprint_dir,gid)
    fileSR.wopen(filename)
    fileSR.printf("$ Stimulation Interval(ms): %d\n",interval)
    fileSR.printf("$ Delay(ms): %f\n",delay)
    print "tvecSR  ",num_lines
    fileSR.printf("$ Number of data : %d\n",num_lines)
    fileSR.printf("$ TSTOP : %d\n",tstop)
    fileSR.printf("$ compartment: %d %d %d %d\n", compartments.x(0), compartments.x(1), compartments.x(2), compartments.x(3))
    mt.fprint(fileSR,"%5.5f\t")
    fileSR.close()
}

proc saveData() { local i localobj outfile strdef filename
     filename = $s1
//     printf("filename: %s\n", filename)

     outfile = new File()
     outfile.wopen(filename)
     for(i=0; i<SectionNum; i=i+1){
     	      access Dend[i]
	      outfile.printf("%f\n", v)
     }
     outfile.printf("\n")
     outfile.close()
}

endtemplate CellSwc
