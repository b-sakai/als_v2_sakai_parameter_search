//************************************************
// FILE NAME : connect.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//


//************************************************
// FUNCTION LIST
//************************************************
//
//************************************************

{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/loadinfo.hoc")}
{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/stim.hoc")}

NUM_GLO = 60
NUMSYNAPSE_PER_PN = 100
NUMSYNAPSE_PER_LN = 1800
AXON_PER_RN = 5
NUMSYNAPSE_PER_GLO_RNs = 100 // NRN * AXON_PER_RN / NUM_GLO   // 100 (= 1200 * 5 / 60)
NUMSYNAPSE_PER_GLO_LN = 40 // NUMSYNAPSE_PER_LN / NUM_GLO    // 3 (= 180 / 60)

objref rnclist
rnclist = new List()
func mkPreSynapseOnRN(){local i, gid_base, gid_cnt, save_syn_gid localobj syn, nil, nc
    gid_base = $1
    save_syn_gid =0
    //if(pc.id==0) print "(syn_gid, pc.id)"
    for i=0, rns.count()-1{
    gid_cnt  = 0
    forsec rns.object(i).axonlist{
        nc = new NetCon(&v(0.5),nil) 
        nc.threshold = 1
        syn_gid = calcSyngid(gid_base, gid_cnt, i)
        pc.set_gid2node(syn_gid,pc.id)
        pc.cell(syn_gid, nc)
        rnclist.append(nc)
        gid_cnt += 1
        if(syn_gid>save_syn_gid){
        save_syn_gid = syn_gid
        }
    }
    }
    //printf("Max synapse gid %d [%d]\n",syn_gid,pc.id)
    printf("Max synapse gid %d [%d]\n",save_syn_gid,pc.id)
    return save_syn_gid
}

func calcSyngid(){local base, axon_id, cell_id, cell_cnt, gid //Calculate Synapse GID: calculate gid of presynapse
    base = $1
    axon_id  = $2 //dendrite number
    cell_id = $3 //cell number
    cell_cnt  = 0
    for i=0, pc.id-1{
    cell_cnt += CELLM.x[i][2]
    }
    gid = base + (cell_cnt + cell_id) * AXON_PER_RN + axon_id
    return gid
}

func calcSrcgid(){local base, syn_id, target_id, modular, gid //Calculate Source GID: calculate which presynapse to connect
    base = $1
    syn_id = $2
    target_id = $3
    modular = $4 - base
    if(target_id > NPN) { // LN
        gid = base + ((NUMSYNAPSE_PER_PN * NPN + (NUMSYNAPSE_PER_LN) * (target_id - NPN) + syn_id) % modular)
    } else { // PN
        gid = base + ((NUMSYNAPSE_PER_PN * target_id + syn_id) % modular)
    }

    return gid
}

func calcSrcgidForPN(){local base, syn_id, gloid, modular, gid //Calculate Source GID: calculate which presynapse to connect
    base = $1
    syn_id = $2
    gloid = $3
    modular = $4 - base
    gid = base + (NUMSYNAPSE_PER_GLO_RNs * gloid) + (syn_id % NUMSYNAPSE_PER_GLO_RNs)


    return gid
}

func calcSrcgidForLN(){local base, syn_id, target_id, gloid, modular, gid //Calculate Source GID: calculate which presynapse to connect
    base = $1
    syn_id = $2
    gloid = $3
    target_id = $4
    modular = $5 - base
    gid = base + (NUMSYNAPSE_PER_GLO_RNs * gloid) + (NUMSYNAPSE_PER_GLO_LN * target_id + syn_id) % NUMSYNAPSE_PER_GLO_RNs


    return gid
}

objref nclist_RN
nclist_RN = new List()
proc mkPostSynapseOfRN(){local i,j,gid_base,src_gid,gloid, maxnum localobj target, syn, nc
    strdef path
    gid_base = $1
    syn_gid_max = $2
    learning = $3

    // make postsynapse of RN to PN
    for i=0, NPN-1{
    if(pc.gid_exists(GID_VEC.x[i])){
        target = pc.gid2obj(GID_VEC.x[i])
        loadSynapseInfo(target, target.synpath, 100)
        target.mkSynapses(target.fromRNsyn, 0, learning, STDP_MUL, STDP_PN_D)

	gloid = pns.object(0).gloid
        printf("target.synlist.count() : %d [%d] gloid = %d\n",target.synlist.count(),pc.id, gloid)

        for j=0, target.synlist.count()-1{
        syn = target.synlist.o(j)
        src_gid = calcSrcgidForPN(gid_base, j, gloid, syn_gid_max)
        nc  = pc.gid_connect(src_gid, syn)
        nc.delay  = 1.0

        nc.weight = WEIGHT_200 // * (5 - i) / 5.0
        nclist_RN.append(nc)
        }
        printf("pn_src_gid : %d i: %d j: %d [%d]\n",src_gid,i,j,pc.id)
    }
    }

    // make postsynapse of RN to LN
    for i=NPN, NPN+NLN-1{
    if(pc.gid_exists(GID_VEC.x[i])){

     	for gloid=0, NUM_GLO-1{ 
	target = pc.gid2obj(GID_VEC.x[i])
        loadSynapseInfo(target, target.synpath, 100)
        sprint(path, "%s/30%d_%02d_glomerulars.dat", target.fromRNsyn, lns.object(0).swcid, gloid)
	printf("lnpath check %s\n", path)
        target.mkSynapses(path, 0, learning, STDP_MUL, STDP_PN_D)
        printf("target.synlist.count() : %d [%d]\n",target.synlist.count(),pc.id)

	if(target.synlist.count() < NUMSYNAPSE_PER_GLO_LN){
	    maxnum = target.synlist.count()
	} else {
	    maxnum = NUMSYNAPSE_PER_GLO_LN
	}

        for j=0, maxnum-1{
        syn = target.synlist.o(j)
        src_gid = calcSrcgidForLN(gid_base, j, gloid, i, syn_gid_max)
        nc  = pc.gid_connect(src_gid, syn)
        nc.delay  = 1.0
        
        if(target.cellid == 3 && target.swcid == 0){
            //print "nc.weight for 300 ",WEIGHT_300
            nc.weight = WEIGHT_300
        }else if(target.cellid == 3 && target.swcid == 1){
            //print "nc.weight for 301 ",WEIGHT_301
            nc.weight = WEIGHT_301
        }else if(target.cellid == 3 && target.swcid == 2){
            //print "nc.weight for 302 ",WEIGHT_300
            nc.weight = WEIGHT_300
        }else if(target.cellid == 3 && target.swcid == 3){
            //print "nc.weight for 303 ",WEIGHT_301
            nc.weight = WEIGHT_301
        }else{
            print "nc.weight ** ERROR **"
        }

        nclist_RN.append(nc)
        }
        printf("src_gid : %d i: %d j: %d [%d]\n",src_gid,i,j,pc.id)
    }
    }
    }
}

proc connectRNtoOthers(){\
    local gid_base, syn_gid,syn_gid_max
    learning = $1
    printf("connectRNtoOthers[%d]\n",pc.id)
    gid_base = 1000000
    syn_gid  = mkPreSynapseOnRN(gid_base)
    printf("Before allreduce gid_max:%d pc.id:%d\n",syn_gid,pc.id)

    syn_gid_max = pc.allreduce(syn_gid,2)
    //printf("After allreduce  gid_max:%d pc.id:%d\n",syn_gid_max,pc.id)
    pc.barrier()
    mkPostSynapseOfRN(gid_base, syn_gid_max, learning)
    pc.barrier()
}

obfunc setVecStim(){localobj vs, spvec
    spvec = $o1
    vs = new VecStim(0.025)
    vs.play(spvec)
    return vs
}

objref spvecs, vses, ncs, synlist_vecstim

proc connect_vec_stim(){ local i, j, dose, nstim localobj rnd, target, post_syn, spvec, vs, nc
    if(pc.id == 0){
        printf("connect_vec_stim()\n")
    }

    strdef _SPT_DIR_
    strdef _SPT_NAME_

    spvecs = new List()
    vses = new List()
    ncs = new List()
    synlist_vecstim = new List()

    _SPT_DIR_ = $s1
    dose = $2
    nstim= $3

    RND_SEED = 0
    rnd = new Random(RND_SEED+pc.id)
    rnd.uniform(0,1000)

    for i=0, lns.count()-1{
        target = lns.object(i)
        loadSynapseInfo(target, target.synpath, 100)
        target.mkSynapses(target.fromMRNsyn, 1, learning, STDP_MUL, STDP_PN_D)
        printf("target.synlist_fromMRN.count() : %d [%d]\n",target.synlist_fromMRN.count(),pc.id)

        for j=0, target.synlist_fromMRN.count()-1{ // mechano input
            post_syn = target.synlist_fromMRN.o(j)
            sprint(_SPT_NAME_, "%sspt%03d.dat", _SPT_DIR_, int(rnd.repick()))
            spvec = readSpikeTiming(_SPT_NAME_)

            vs    = setVecStim(spvec)
            nc = target.connectVecStim(vs, post_syn)

            if(target.swcid == 0){
                nc.weight = WEIGHT_M
            }else if(target.swcid == 1){
                nc.weight = WEIGHT_M
            }

            spvecs.append(spvec)
            vses.append(vs)
            ncs.append(nc)
            synlist_vecstim.append(post_syn)
        }
     }
}


objref NC_CMPT_VECS, NC_GID_VECS
NC_CMPT_VECS = new List()
NC_GID_VECS  = new List()

func set_netcon_gid(){\
    local nid, cmpt, gid, i, j\
    localobj nc_cmpt_vec, nc_gid_vec
    nid  = $1
    cmpt = $2
    gid  = $3

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            printf("nid and cmpt already exist\n")
            return -1
        }
        }
        NC_CMPT_VECS.o(i).append(cmpt)
        NC_GID_VECS.o(i).append(gid)
        return 1
    }
    }
    nc_cmpt_vec = new Vector()
    nc_cmpt_vec.append(nid,cmpt)
    NC_CMPT_VECS.append(nc_cmpt_vec)
    nc_gid_vec = new Vector()
    nc_gid_vec.append(nid,gid)
    NC_GID_VECS.append(nc_gid_vec)
    return 1
}

func get_netcon_gid(){\
    local nid, cmpt, gid, i, j
    nid  = $1
    cmpt = $2
    gid  = $3

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            gid = NC_GID_VECS.o(i).x[j]
            return gid
        }
        }
    }
    }
    return -1
}

proc print_netcon_gid(){
    for i=0, NC_CMPT_VECS.count()-1{
    printf("NID : %d",NC_CMPT_VECS.o(i).x[0])
    for j=1, NC_CMPT_VECS.o(i).size()-1{
        printf("%d\t%d\n",NC_CMPT_VECS.o(i).x[j],NC_GID_VECS.o(i).x[j])
    }
    }
}

func netcon_gid_exists(){\
    local nid, gid, i, j
    nid  = $1
    gid = $2

    for i=0, NC_GID_VECS.count()-1{
    if(nid == NC_GID_VECS.o(i).x[0]){
        for j=1, NC_GID_VECS.o(i).size()-1{
        if(gid == NC_GID_VECS.o(i).x[j]){
            printf("netcon_exists(%d, %d) is TRUE\n",nid,gid)
            return 1
        }
        }
    }
    }
    return 0
}

func netcon_cmpt_exists(){\
    local nid, cmpt, i, j
    nid  = $1
    cmpt = $2

    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        for j=1, NC_CMPT_VECS.o(i).size()-1{
        if(cmpt == NC_CMPT_VECS.o(i).x[j]){
            printf("netcon_cmpt_exists(%d, %d) is TRUE\n",nid,cmpt)
            return 1
        }
        }
    }
    }
    return 0
}

func netcon_nid_exists(){\
    local nid, i, j
    nid  = $1
    for i=0, NC_CMPT_VECS.count()-1{
    if(nid == NC_CMPT_VECS.o(i).x[0]){
        printf("netcon_nid_exists(%d, %d, %d) is TRUE\n",nid)
        return 1
    }
    }
    return 0
}



_pre_nid  = 0
_post_nid = 0
_pre_comp = 0
_post_comp = 0
_gid      = 0

objref pre_comps,post_comps
objref syntypes//types 1 inhibition 2 excitation, synapse type
objref gidVec

proc readSynapseList2(){\
    local nid, nconnect, i,gid_base\
    localobj synf,strobj,pre,post,nc,nil,syn, SynPathList_

    strdef buf, ctype
    strdef syn_filename

    pre_comps = new Vector()
    post_comps = new Vector()
    syntypes = new Vector()
    gidVec = new Vector()
    SynPathList_ = $o1
    syn_filename = SynPathList_.synpath
    gid_cnt  = 0
    
    synf = new File()

    if(synf.ropen(syn_filename) != 1){
    printf("ERROR : File was not found. (%s)\n",syn_filename)
    return(-1) 
    }

    while(synf.scanstr(buf)!=-1){
    if(strcmp("#",buf)==0){
        continue
    }else if(strcmp("$",buf)==0){
        synf.gets(buf)
        sscanf(buf,"%s %d\n",ctype,&nid)
        if(strcmp("PRE_CELL",ctype)==0){
        _pre_nid  = nid
        }else if(strcmp("POST_CELL",ctype)==0){
        _post_nid = nid
        }else if(strcmp("NCONNECTIONS",ctype)==0){
        nconnect = nid
        for(i=0;i<nconnect;i+=1){
            synf.gets(buf)
            sscanf(buf,"%d %d %d\n",&_pre_comp, &_post_comp, &_gid)
            //printf("%d %d\n",_pre_comp, _post_comp)
            pre_comps.append(_pre_comp)
            post_comps.append(_post_comp)
            //gidVec.append(gid_base+gid_cnt)
            gidVec.append(_gid)
            if(int(SynPathList_.postgid/100000)==3){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Inhibition"
            syntypes.append(1)
            }else if(int(SynPathList_.postgid/100000)==2){
            //print _pre_nid, _pre_comp, _post_nid,_post_comp,"Excitation"
            syntypes.append(2)
            }else{
            print _pre_nid
            print "SOMETHINGS WRONG IN READ SYNAPSE LIST"
            return (-1)
            }
            gid_cnt += 1
        }
        }
    }
    }
    //pre_comps_list[SynPathList_.pregid].append(pre_comps)
    //post_comps_list[SynPathList_.postgid].append(post_comps)
}


objref nclist_NtoN
nclist_NtoN = new List()

objref nclist_LtoLstdp
nclist_LtoLstdp = new List()
objref nclist_LtoPstdp
nclist_LtoPstdp = new List()

objref gabalist
gabalist  = new List()


//Post Synapse Voltage
objref psv_tvec
objref psv_vecs
psv_vecs = new List()
proc setPostSynapseVoltageRecord(){local cmpt localobj vec, cell
    cell = $o1
    cmpt = $2
    vec = new Vector()
    vec.record(&cell.Dend[cmpt].v(0.5))
    psv_vecs.append(vec)
}

proc setPostSynapseVoltageRecord_t(){
    psv_tvec = new Vector()
    psv_tvec.record(&t)
}

proc fprintPostSynapseVoltageRecord(){localobj mt, file
    if(psv_vecs.count()==0){return}
    strdef filename, fprint_dir
    fprint_dir = $s1
    mt = new Matrix()
    file = new File()
    mt.resize(psv_tvec.size(),psv_vecs.count()+1)
    mt.setcol(0,psv_tvec)
    for(j = 0; j<psv_vecs.count();j+=1){
    mt.setcol(j+1,psv_vecs.o(j))
    }
    sprint(filename,"%s%d_PSV.txt",fprint_dir,pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}


proc makeNET_LtoPsynapse(){local pre_cell, post_cell, gmax_a,gmax_b, delay, weight, point localobj gaba, stdp, pre, post, nc, nil
    pre_cell=$1
    post_cell=$2
    delay=$3
    weight=$4
    gmax_a=$5
    gmax_b=$6
    learning=$7

    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    for i=0, pre_comps.size()-1{
        if(!pc.gid_exists(gidVec.x[i])){
        point = (pc.id)/(NLN+NPN)
        pre.Dend[pre_comps.x[i]] nc = new NetCon(&v(point),nil)
        nc.threshold = 1
        pc.set_gid2node(gidVec.x[i],pc.id)
        pc.cell(gidVec.x[i],nc)
        nclist_NtoN.append(nc)
        }
    }
    }

    if(pc.gid_exists(post_cell)){
        post = pc.gid2obj(post_cell)
        for i=0, post_comps.size()-1{
        //printf("POST: %d, GID : %d, i : %d, [%d]\n",post_cell,gidVec.x[i],i,pc.id)
	if(i < 3){
	    stdp = post.mkNET_STDP(post_comps.x[i], LEARNING)
            gabalist.append(stdp)
            nc = pc.gid_connect(gidVec.x[i], stdp)
            nc.delay = delay
            nc.weight = 0.0
            nclist_NtoN.append(nc)
	    nclist_LtoPstdp.append(nc)
	}else{
            if(GABAA_ON == 1){
                gaba = post.mkNET_GABAa(post_comps.x[i],gmax_a)
                gabalist.append(gaba)
                nc = pc.gid_connect(gidVec.x[i], gaba)
                nc.delay = delay
                nc.weight = weight
                nclist_NtoN.append(nc)
            }
	    if(GABAB_ON == 1){
                gaba = post.mkNET_GABAb(post_comps.x[i],gmax_b)
                gabalist.append(gaba)
                nc = pc.gid_connect(gidVec.x[i], gaba)
                nc.delay = delay
                nc.weight = weight
                nclist_NtoN.append(nc)
            }
	}
        //setPostSynapseVoltageRecord(post, post_comps.x[i])
        }
    }

}

proc makeNET_LtoLsynapse(){local pre_cell, post_cell, gmax_a,gmax_b, delay, weight, point localobj gaba, stdp, pre, post, nc, nil
    pre_cell=$1
    post_cell=$2
    delay=$3
    weight=$4
    gmax_a=$5
    gmax_b=$6
    learning=$7

    if(pc.gid_exists(pre_cell)){
    pre = pc.gid2obj(pre_cell)
    for i=0, pre_comps.size()-1{
        if(!pc.gid_exists(gidVec.x[i])){
        point = (pc.id)/(NLN+NPN)
        //printf("PRE : %d, GID : %d, i : %d, point : %f [%d]\n",pre_cell,gidVec.x[i],i,point,pc.id)
        pre.Dend[pre_comps.x[i]] nc = new NetCon(&v(point),nil)
        //nc = pre.connect2target(pre_comps.x[i],nil)
        nc.threshold = 1
        pc.set_gid2node(gidVec.x[i],pc.id)
        pc.cell(gidVec.x[i],nc)
        nclist_NtoN.append(nc)
        /*
        pre.Dend[pre_comps.x[i]]{
            psection()
        }
        */
        }
    }
    }

    if(pc.gid_exists(post_cell)){
        post = pc.gid2obj(post_cell)
        for i=0, post_comps.size()-1{
        //printf("POST: %d, GID : %d, i : %d, [%d]\n",post_cell,gidVec.x[i],i,pc.id)
	if(i%2 == 0){
	    stdp = post.mkNET_STDP(post_comps.x[i], LEARNING)
            gabalist.append(stdp)
            nc = pc.gid_connect(gidVec.x[i], stdp)
            nc.delay = delay
            nc.weight = 5.0
            nclist_NtoN.append(nc)
	    nclist_LtoLstdp.append(nc)
	}else{
            if(GABAA_ON == 1){
                gaba = post.mkNET_GABAa(post_comps.x[i],gmax_a)
                gabalist.append(gaba)
                nc = pc.gid_connect(gidVec.x[i], gaba)
                nc.delay = delay
                nc.weight = weight
                nclist_NtoN.append(nc)
            }
	    if(GABAB_ON == 1){
                gaba = post.mkNET_GABAb(post_comps.x[i],gmax_b)
                gabalist.append(gaba)
                nc = pc.gid_connect(gidVec.x[i], gaba)
                nc.delay = delay
                nc.weight = weight
                nclist_NtoN.append(nc)
            }
	}
        //setPostSynapseVoltageRecord(post, post_comps.x[i])
        }
    }
}


//----------------------------------------------------
// Connect Neurons to Neurons
// for example ln to ln, ln to pn


proc connectNtoN_NET_GABA2(){\
    local i, j,gid_base,gmax_a, gmax_b, weight\
    localobj str,nil,pre,post
    strdef _syn_path, cmd
    gid_base = 2000000
    weight =1.0
    learning = $1

    printf("connectNtoN_NET_GABA[%d]\n",pc.id)
    printf("NPN : %d NLN : %d\n",NPN,NLN)
    for(i=0;i<NPN;i=i+1){
        if(pc.id == 0){printf("loadSynapseInfo PN\n")}
        loadSynapseInfo(nil,pn_path[i].synpath,200)
    }
    for(i=0;i<NLN;i=i+1){
        if(pc.id == 0){printf("loadSynapseInfo LN\n")}
        loadSynapseInfo(nil,ln_path[i].synpath,200)
    }
    printf("SynPathList.count() %d [%d]\n",SynPathList.count(),pc.id)

    if(IS_SUPERCOMPUTER==1){
	if(pc.id==0) {
            print "Begin decompressing synlist"
            sprint(cmd, "tar xf %ssynlist.tar -C %s", synlist_dir, synlist_dir)
            print cmd
            system(cmd)
            print "End decompressing synlist"
	}
    }
    pc.barrier()

    for(j=0;j<SynPathList.count();j+=1){
        readSynapseList2(SynPathList.o(j))
        if(int(SynPathList.o(j).postgid/100000)==2){//If post-synaptic neuron is PN
            if(GABAA_ON == 1){
                gmax_a = GABAA_GMAX_LTOP/NLN //The larger the network is, the more synapses are connected to one compartment.
            }
            if(GABAB_ON == 1){
                gmax_b = GABAB_GMAX_LTOP/NLN
            }
	    makeNET_LtoPsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,1.0,weight,gmax_a,gmax_b, learning)
        }else{
            if(GABAA_ON == 1){
                gmax_a = GABAA_GMAX_LTOL/NLN
            }else if(GABAB_ON == 1){
                gmax_b = GABAB_GMAX_LTOL/NLN
            }
	    makeNET_LtoLsynapse(SynPathList.o(j).pregid,SynPathList.o(j).postgid,1.0,weight,gmax_a,gmax_b, learning)
        }
        if(pre_comps.size() != post_comps.size()){
            print "ERROR IN CONNECTNTON"
            return (-1)
        }
    }
    printf("gabalist.count()=%d [%d]\n",gabalist.count(),pc.id)
}


