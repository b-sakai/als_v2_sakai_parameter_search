//************************************************
// FILE NAME : main.hoc
// 2015.04.28
// Heewon Park
//************************************************

//************************************************
// MODIFICATION HISTORY
//************************************************
//
//
//

//************************************************
// FUNCTION LIST
//************************************************
// mkNetwork()
// mkCells()
// mkConnections()
// mkStimulations()
// setRecorder()
// setPrinter()
//************************************************
{load_file("nrngui.hoc")}
{load_file("stdlib.hoc")}

{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/CellSwc3.hoc")}
{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/loadinfo.hoc")}
{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/areaList.hoc")}
{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/exSectionList.hoc")}
//{load_file("declare_parameters.hoc")}
//************************************************
// For Goto's PN model parameter
if(name_declared("SPIKEGEN_POS")!=5){ execute("SPIKEGEN_POS=10")}
if(name_declared("SPIKEGEN_SIZE")!=5){ execute("SPIKEGEN_SIZE=10") }
if(name_declared("GKDRBAR")!=5){ execute("GKDRBAR=0.7") }
if(name_declared("GNABAR")!=5){ execute("GNABAR=1.2") }
if(name_declared("GCATBAR")!=5){ execute("GCATBAR=0.0015") }
if(name_declared("GKCABAR")!=5){ execute("GKCABAR=0.15") }
if(name_declared("KCA")!=5){ execute("KCA=2.4") }
if(name_declared("KNA")!=5){ execute("KNA=3.0") }
if(name_declared("KK")!=5){ execute("KK=KNA") }
if(name_declared("CM")!=5){ execute("CM=1") } //
if(name_declared("GL")!=5){ execute("GL=0.00035") } //
if(name_declared("EL")!=5){ execute("EL=-60") } //
if(name_declared("CAGAIN")!=5){ execute("CAGAIN=0.16")}

//************************************************

//*****************************************************
//if(name_declared("STOPTIME")!=5){ execute("STOPTIME=50")}
//if(name_declared("IS_SUPERCOMPUTER")!=5){ execute("IS_SUPERCOMPUTER=0")}
//if(name_declared("INTERVAL")!=5){ execute("INTERVAL=1200")}
//if(name_declared("SAVE_ALL")!=5){ execute("SAVE_ALL=0")}
//if(name_declared("NCELL")!=5){ execute("NCELL=40")}
//if(name_declared("START_TIME")!=5){ execute("START_TIME=0")}
//if(name_declared("WEIGHT_200")!=5){ execute("WEIGHT_200=0.05")}
//if(name_declared("WEIGHT_300")!=5){ execute("WEIGHT_300=0.05")}
//if(name_declared("WEIGHT_301")!=5){ execute("WEIGHT_301=0.9")}
//if(name_declared("WEIGHT_301")!=5){ execute("WEIGHT_301=0.008")}
//if(name_declared("WEIGHT_M")!=5){ execute("WEIGHT_M=0.05")}
//if(name_declared("WEIGHT_GO_300")!=5){ execute("WEIGHT_GO_300=0.05")}
//if(name_declared("WEIGHT_GO_301")!=5){ execute("WEIGHT_GO_301=0.05")}
//if(name_declared("GBAR_TIMES_LN")!=5){ execute("GBAR_TIMES_LN=1.0")}
//if(name_declared("GBAR_TIMES_PN")!=5){ execute("GBAR_TIMES_PN=1.0")}
//if(name_declared("GABAA_GMAX_LTOL")!=5){ execute("GABAA_GMAX_LTOL=5.0")}
//if(name_declared("GABAB_GMAX_LTOL")!=5){ execute("GABAB_GMAX_LTOL=5.0")}
//if(name_declared("GABAA_GMAX_LTOP")!=5){ execute("GABAA_GMAX_LTOP=0.1")}
//if(name_declared("GABAB_GMAX_LTOL")!=5){ execute("GABAB_GMAX_LTOL=0.1")}
//if(name_declared("GABAA_GMAX_LTOP")!=5){ execute("GABAA_GMAX_LTOP=50.0")}
//if(name_declared("GABAB_GMAX_LTOP")!=5){ execute("GABAB_GMAX_LTOP=0.6")}
//if(name_declared("GABAB_ON")!=5){ execute("GABAB_ON=0")}
//if(name_declared("GABAA_ON")!=5){ execute("GABAA_ON=0")}
//if(name_declared("DOSE")!=5){ execute("DOSE=1000")}
//if(name_declared("MECHANO_SPONTANEOUS")!=5){ execute("MECHANO_SPONTANEOUS=60")}
//if(name_declared("NSTIM")!=5){ execute("NSTIM=30")}
//if(name_declared("MECHANO_ON")!=5){ execute("MECHANO_ON=1")}
//if(name_declared("GENERAL_ODOR_ON")!=5){ execute("GENERAL_ODOR_ON=1")}
//*****************************************************************

strdef info_filename, info_filename_rn, synlist_dir

if(IS_SUPERCOMPUTER == 0){
    info_filename = "../input/network_info/network_info_3_1PN2LNs.dat"
    info_filename_rn = "../input/network_info/network_info_500rns.dat"
    synlist_dir = "../input/synapse_list/3_1PN2LNs/"
}else if(IS_SUPERCOMPUTER == 1){
    sprint(info_filename, "../input/network_info/network_info_%dcells.dat", NCELL)
    sprint(info_filename_rn, "../input/network_info/network_info_%drns.dat", 1200)
    sprint(synlist_dir, "../input/synapse_list/%dcells/", NCELL)
}else if(IS_SUPERCOMPUTER == 2){
    sprint(info_filename, "../input/network_info/network_info_%dcells.dat", 46)
    sprint(info_filename_rn, "../input/network_info/network_info_%drns.dat",1200)
    sprint(synlist_dir, "../input/synapse_list/%dcells/", 46)
}else{
    printf("IS_SUPERCOMPUTER = %d is invalid.\n", IS_SUPERCOMPUTER)
}


strdef zerong_olfactory_spt_file_dir, halfng_olfactory_spt_file_dir, olfactory_spt_file_dir, mechano_spt_file_dir


	sprint(zerong_olfactory_spt_file_dir, "../input/spiketiming/ORN/%dng_1stim/", 0)
	sprint(halfng_olfactory_spt_file_dir, "../input/spiketiming/ORN/%dng_1stim/", 1000)
        sprint(olfactory_spt_file_dir, "../input/spiketiming/ORN/%dng_1stim/", DOSE)
        if(MECHANO_ON == 1){
            sprint(mechano_spt_file_dir, "../input/spiketiming/MRN/%dHz_1stim/", MECHANO_SPONTANEOUS)
        } else{
            sprint(mechano_spt_file_dir, "../input/spiketiming/MRN/%dHz_constant/", MECHANO_SPONTANEOUS)
        }


strdef FPRINT_DIR, SPIKEOUT_DIR, WEIGHT_DIR
if(IS_SUPERCOMPUTER == 1){
    sprint(FPRINT_DIR, "./result/%7d/record/%7d", PREFIX, PREFIX)
    sprint(SPIKEOUT_DIR, "./result/%7d/spike/%7d", PREFIX, PREFIX)
    sprint(WEIGHT_DIR, "./result/%7d/weight/%7d", PREFIX, PREFIX)
}else{
    sprint(FPRINT_DIR,"../result/%010d/record/",START_TIME)
    sprint(SPIKEOUT_DIR,"../result/%010d/spike/",START_TIME)
}


objref pc
pc = new ParallelContext()

proc ShowInitialStatus(){
    if(pc.id==0){
    printf("==================================================================================\n")
    printf("PC.NHOST: %d\n",pc.nhost)
    printf("STOPTIME: %d(ms), IS_SUPERCOMPUTER: %d, INTERVAL: %d, SAVE_ALL: %d, GENERAL_ODOR_ON: %d\n",STOPTIME, IS_SUPERCOMPUTER, INTERVAL, SAVE_ALL, GENERAL_ODOR_ON)
    printf("NETWORK INFORMATION :\n")
    printf("CELL LIST : %s(PNs and LNs), %s(RNs)\n",info_filename, info_filename_rn)
    printf("WEIGHT_200\t%f\tWEIGHT_300\t%f\tWEIGHT_301\t%f\n",WEIGHT_200,WEIGHT_300,WEIGHT_301)
    printf("GABAA_GMAX_LTOL\t%f\tGABAB_GMAX_LTOL\t%f\tGABAA_GMAX_LTOP\t%f\tGABAB_GMAX_LTOP\t%f\n",GABAA_GMAX_LTOL,GABAB_GMAX_LTOL,GABAA_GMAX_LTOP,GABAB_GMAX_LTOP)
    printf("GABAA_ON\t%f\tGABAB_ON\t%f\n",GABAA_ON, GABAB_ON)
    printf("OLFACTORY SPIKE TIMING: %s\n", olfactory_spt_file_dir)
    printf("MECHANO SPIKE TIMING: %s\n", mechano_spt_file_dir)
    printf("DOSE: %f, NSTIM: %d\n",DOSE, NSTIM)
    printf("==================================================================================\n")
    }
}

ShowInitialStatus()

objref pns,lns,rns

proc mkNetwork(){
    mkCells()
    if(pc.id == 0){
    printf( "pc.id\tpn\tln\trn\n")
    }

    printf("%d\t%d\t%d\t%d\n",pc.id, pns.count(), lns.count(), rns.count())

    mkConnections()
}
{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/divider.hoc")}
objref CELLM

proc initModel_PN() { local r, rr localobj pn
    r  = SPIKEGEN_RATIO
    rr  = 1000
    pn = $o1

    pn forall {
       uninsert pas
       uninsert GPeA
    }

    forsec pn.noaxonlist {
        insert pas
        e_pas = -60
        g_pas = 0.00035
        cm = 1
    }

    forsec pn.axonlist {
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
        eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060

        gnabar   = 120e-3
        gkdrbar  = 5e-3
        gl  = 0.3e-3
        gcatbar   = 0.1e-3
        gkcabar   = 2e-3
        gA =  220e-3
    }
	
    forsec pn.spikegenlist {
        insert GPeA
        ena_GPeA = 55
        ek_GPeA = -70
        eca_GPeA = 124
        el_GPeA = -50
        //a_m_GPeA = 0.065
        a_m_GPeA = 0.048
        //a_W_GPeA = 0.055
        a_W_GPeA = 0.060


        gnabar = 120e-3 * SPIKEGEN_RATIO
	gkdrbar = 120e-3 * SPIKEGEN_RATIO
        gl  = 0.3e-3
        gcatbar   = 0.1e-3
        gkcabar   = 2e-3
        gA =  220e-3

    }
}

proc mkCells(){localobj pn,ln,rn, nc, nil
    loadinfo(info_filename)
    loadinfo(info_filename_rn)
    NCELLS = NPN + NLN + NRN

    CELLM = divider(pc.nhost)
    pns = new List()// projection neurons
    lns = new List()// local interneurons
    rns = new List()// receptor neurons

    if(pc.id==0) {print "NCELLS ",NCELLS}

    for i=0, NCELLS-1{
        if((i%pc.nhost==pc.id)&&(i<NPN)){
            j = i
            pn = new CellSwc(pn_path[j].swcpath,pn_matrix.x[j][0],pn_matrix.x[j][1],pn_matrix.x[j][2],pn_matrix.x[j][3],pn_matrix.x[j][4])
            pn.setPath(pn_path[j].ppath, pn_path[j].synpath)
            pn.setNid()
	    AXON_POS = 20
	    AXON_SIZE = 25
            pn.setAxonlist(AXON_POS, AXON_SIZE)

	    SPIKEGEN_POS = 24
	    SPIKEGEN_SIZE = 3
            pn.setSpikegenlist(SPIKEGEN_POS, SPIKEGEN_SIZE)
	    printf("SPIKEGEN_POS: %d\n",SPIKEGEN_POS)	
            //pn.spikegenlist.printnames()

            initModel_PN(pn)
            //pn.insertFukuda_tunned(GBAR_TIMES_PN)
            //pn.insertFukuda_tunned()

            pns.append(pn)
            //print "pn ", i, j
            nc = pn.connect2target(0,nil)
            //pns.o(0).mkSynapses("./synlist/fromRN/050622_4_sn_SynapseList.dat")

            pc.set_gid2node(pn.gid,pc.id)
            pc.cell(pn.gid,nc)
            //psection()
            print "SectionNum",pn.SectionNum
        }else if((i%pc.nhost==pc.id)&&(i>=NPN && i<NPN+NLN)){
            j = i-NPN
            ln = new CellSwc(ln_path[j].swcpath,ln_matrix.x[j][0],ln_matrix.x[j][1],ln_matrix.x[j][2],ln_matrix.x[j][3],0)
            ln.setPath(ln_path[j].ppath, ln_path[j].synpath)
            ln.setNid()
            if(ln.swcid == 0){
                ln.insertLNlla(GBAR_TIMES_LN)
            } else if(ln.swcid == 1) {
                ln.insertLNlla(3.0)
            } else if(ln.swcid == 2){
                ln.insertLNlla(GBAR_TIMES_LN)
            } else if(ln.swcid == 3) {
                ln.insertLNlla(3.0)
	    } else {
                print "error in making ln"
            }
            lns.append(ln)

            nc = ln.connect2target(0,nil)

            pc.set_gid2node(ln.gid,pc.id)
            pc.cell(ln.gid,nc)
            print "SectionNum",ln.SectionNum
        }else if(i>=NPN+NLN){
            if(pc.nhost>NPN+NLN){
                if(int((i-NLN-NPN)/120)==(pc.id-NPN-NLN)){
                    j = i-NPN-NLN
                    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2],rn_matrix.x[j][3])
                    rn.getAxon()
                    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
                    rn.setGid()
                    rn.setNid()
                    rn.insertHH_RN()
                    //print "SectionNumber " ,rn.SectionNum

                    rns.append(rn)
                    //print "rn ", i, j, pc.id
                    nc = rn.connect2target(0,nil)

                    pc.set_gid2node(rn.gid,pc.id)
                    pc.cell(rn.gid,nc)
                    //psection()
                }
            }else if(pc.nhost<=NPN+NLN){
                if(i%pc.nhost==pc.id){
                    //print "j & i",j, i
                    j = i-NPN-NLN
                    rn = new CellSwc(rn_path[j].swcpath,-1,rn_matrix.x[j][0],rn_matrix.x[j][1],rn_matrix.x[j][2])
                    rn.getAxon()
                    rn.setPath(rn_path[j].ppath, rn_path[j].synpath)
                    rn.setGid()
                    rn.setNid()
                    rn.insertHH_RN()
                    //print "SectionNumber " ,rn.SectionNum
                    rns.append(rn)
                    //print "rn ", i, j, pc.id
                    nc = rn.connect2target(0,nil)
		    
                    pc.set_gid2node(rn.gid,pc.id)
                    pc.cell(rn.gid,nc)
		    print "???????????????????????????????????????????????????????????????"

                }
            }else{
                print "SOMETHING WRONG IN MAKE RECEPTOR"
            }
        }
    }
    pc.multisplit()
    pc.barrier()
}

{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/connect.hoc")}
proc mkConnections(){
    connectRNtoOthers(LEARNING)
    connect_vec_stim(mechano_spt_file_dir, DOSE, NSTIM)

    //connectNtoN()
    connectNtoN_NET_GABA2(LEARNING)
}

if(pc.id==0)print "MAKE NETWORK"
mkNetwork()
pc.barrier()

{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/stim.hoc")}
proc mkStimulations(){
    mkSerialStim(zerong_olfactory_spt_file_dir, halfng_olfactory_spt_file_dir, olfactory_spt_file_dir)
}
if(pc.id==0)print "SET STIMULATION"
printf("SET STIMULATION[%d]\n",pc.id)
mkStimulations()
printf("SET STIMULATION END[%d]\n",pc.id)
pc.barrier()



{load_file("/work/hp160269/m49005/als_v2_sakai_parameter_search/src/recorder.hoc")}

proc setRecorder(){
    setVoltageRecord(0)
    //setGABArecord()
    //setDummyRecord()
    //setPreGABArecord()
    if(name_declared("COMP_0")!=5){
        spikerecord()
    } else {
        multiSpikeRecord(COMP_0, COMP_1, COMP_2, COMP_3)
    }
}

proc setPrinter(){
    fprintVoltageRecord(0)
    //fprintGABArecord()
    //fprintDummyRecord()
    //fprintSynapseList()
    //fprintPreGABArecord()
    if(name_declared("COMP_0")!=5){
        spikeout()
    } else {
        multiSpikeOut()
    }
}

{pc.set_maxstep(10)}
tstop = STOPTIME


objref vweight
objref lvweight
objref wmt, wfile
strdef wfilename

objref rvweight
objref rwmt, rwfile
strdef rwfilename

if (SAVE_ALL == 1) {
    strdef output_filename
    savestep = 0.025
    numstep = int(tstop/savestep)

    pc.barrier()
    stdinit()
    
    
    for tstep=0, numstep-1{
        fadvance()

	if(pc.id == 0){
	  if(tstep%int(1000/dt)==0){
		 printf("******************** t = %f\n", t)
	   }
	}
	// first 1000ms
	if(tstep<int(2000/savestep) && tstep>int(1000/savestep)){
	if(pc.id == 2){ // when 301****
	    sprint(output_filename, "%s%dt%f.dat", FPRINT_DIR, pns.o(0).nid, t)
            pns.o(0).saveData(output_filename)
        }
	}
	// last 1000 ms
	if(tstep<int(tstop/savestep) && tstep>int((tstop-1000)/savestep)){
	if(pc.id == 2){ // when 301****
	    sprint(output_filename, "%s%dt%f.dat", FPRINT_DIR, pns.o(0).nid, t)
            pns.o(0).saveData(output_filename)
        }
	}
    }
    
    pc.barrier()
} else {


    if(pc.id==4) {
    lvweight = new List()
    printf("nclist_LtoPstdp.count() = %d\n", nclist_LtoPstdp.count())
    print "SET RECORDER"
    printf("OUTPUT DIR : %s\n",FPRINT_DIR)
    for i=0, nclist_LtoPstdp.count()-1 { 
        vweight = new Vector()
	lvweight.append(vweight)
    }
    for i=0, nclist_LtoPstdp.count()-1 { 
        lvweight.object(i).record(&nclist_LtoPstdp.object(i).weight)
    }
    }

    for i=0, NCELL-1 { 
    if(pc.id==i) {
        // saving weight
        rvweight = new Vector()
        rvweight.record(&nclist_RN.object(i).weight)
    }
    }

    printf("SET RECORDER[%d]\n",pc.id)
    setRecorder()
    printf("SET RECORDER END[%d]\n",pc.id)
    pc.barrier()

    pc.setup_transfer()
    if(pc.id==0)print "START RUN"
    stdinit()
    {pc.psolve(tstop)}

    pc.barrier()
    if(pc.id==0)print "FINISHED "
    if(pc.id == 0){printf("PRINTING[%d]\n",pc.id)}

    setPrinter()


    if(pc.id == 4) {
    for i=0, lvweight.count()-1{
    wmt = new Matrix()
    wfile = new File()

    wmt.resize(vweight.size(), 2)
    wmt.setcol(0, volt_tvec)
    wmt.setcol(1, lvweight.object(i))
    sprint(wfilename, "%sL%03dweight.lweight", WEIGHT_DIR, i)
    wfile.wopen(wfilename)
    wmt.fprint(wfile,"%5.5f\t")
    wfile.close()
    }
    }

    for i=0, NCELL-1 {
    if(pc.id == i) {
    rwmt = new Matrix()
    rwfile = new File()

    rwmt.resize(rvweight.size(), 2)
    rwmt.setcol(0, volt_tvec)
    rwmt.setcol(1, rvweight)
    sprint(rwfilename, "%s%02dweight.rweight", WEIGHT_DIR, pc.id)
    rwfile.wopen(rwfilename)
    rwmt.fprint(rwfile,"%5.5f\t")
    rwfile.close()
    }
    }

}

if(pc.id == 0){
    printf("END PROGRAM[%d]\n",pc.id)
}
{pc.runworker()}
{pc.done()}
quit()
